/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/HistoricalCandleResponse', 'model/IndexCandleDataResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/HistoricalCandleResponse'), require('../model/IndexCandleDataResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.HistoricalCandleDataApi = factory(root.StockNoteApiDocumentation.ApiClient, root.StockNoteApiDocumentation.HistoricalCandleResponse, root.StockNoteApiDocumentation.IndexCandleDataResponse);
  }
}(this, function(ApiClient, HistoricalCandleResponse, IndexCandleDataResponse) {
  'use strict';

  /**
   * HistoricalCandleData service.
   * @module api/HistoricalCandleDataApi
   * @version 1.0
   */

  /**
   * Constructs a new HistoricalCandleDataApi. 
   * @alias module:api/HistoricalCandleDataApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getHistoricalCandleData operation.
     * @callback module:api/HistoricalCandleDataApi~getHistoricalCandleDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoricalCandleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historical candle data
     * Gets the historical candle data such as Open, high, low, close, last traded price and volume within specific dates for a specific symbol. From date is mandatory. End date is optional and defaults to yesterday.
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {String} symbolName Symbol name of the scrip.
     * @param {String} fromDate From date in yyyy-MM-dd
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
     * @param {String} opts.toDate To date in yyyy-MM-dd
     * @param {module:api/HistoricalCandleDataApi~getHistoricalCandleDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoricalCandleResponse}
     */
    this.getHistoricalCandleData = function(xSessionToken, symbolName, fromDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling getHistoricalCandleData");
      }

      // verify the required parameter 'symbolName' is set
      if (symbolName === undefined || symbolName === null) {
        throw new Error("Missing the required parameter 'symbolName' when calling getHistoricalCandleData");
      }

      // verify the required parameter 'fromDate' is set
      if (fromDate === undefined || fromDate === null) {
        throw new Error("Missing the required parameter 'fromDate' when calling getHistoricalCandleData");
      }


      var pathParams = {
      };
      var queryParams = {
        'exchange': opts['exchange'],
        'symbolName': symbolName,
        'fromDate': fromDate,
        'toDate': opts['toDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HistoricalCandleResponse;

      return this.apiClient.callApi(
        '/history/candleData', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIndexCandleData operation.
     * @callback module:api/HistoricalCandleDataApi~getIndexCandleDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndexCandleDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Index Historical CandleData
     * Gets the Index historical candle data such as Open, high, low, close, last traded price and volume within specific dates for a specific index. From date is mandatory. End date is optional and defaults to Today.      <h3>Supports Following List of Index names:</h3><table>  <tr><td>BSE CG</td><td>SENSEX</td><td>BSE CD</td><td>NIFTY50 PR 1x INV</td></tr>  <tr><td>BSE IT</td><td>METAL</td><td>OILGAS</td><td>NIFTY50 PR 2x LEV</td></tr>  <tr><td>BSEIPO</td><td>GREENX</td><td>POWER</td><td>NIFTY50 TR 1x INV</td></tr>  <tr><td>CARBON</td><td>BASMTR</td><td>CDGS</td><td>NIFTY50 TR 2x LEV</td></tr>  <tr><td>BSEFMC</td><td>BSE HC</td><td>ALLCAP</td><td>NIFTY50 TR 2x LEV</td></tr>  <tr><td>REALTY</td><td>SMEIPO</td><td>DOL30</td><td>NIFTY Mid LIQ 15</td></tr>  <tr><td>LRGCAP</td><td>MIDSEL</td><td>SMLSEL</td><td>NIFTY100 LIQ 15</td></tr>  <tr><td>SNXT50</td><td>SNSX50</td><td>NIFTY 50</td><td>NIFTY Quality 30</td></tr>  <tr><td>NIFTY BANK</td><td>NIFTY NEXT 50</td><td>DOL100</td><td>NIFTY MIDCAP 50</td></tr>  <tr><td>NIFTY 100</td><td>NIFTY 200</td><td>NIFTY 500</td><td>NIFTY FIN SERVICE</td></tr>  <tr><td>NIFTY AUTO</td><td>NIFTY FMCG</td><td>NIFTY IT</td><td>NIFTY COMMODITIES</td></tr>  <tr><td>NIFTY MEDIA</td><td>NIFTY METAL</td><td>NIFTY PHARMA</td><td>NIFTY CONSUMPTION</td></tr>  <tr><td>NIFTY PSU BANK</td><td>NIFTY PVT BANK</td><td>NIFTY REALTY</td><td>NIFTY GROWSECT 15</td></tr>  <tr><td>NIFTY CPSE</td><td>NIFTY ENERGY</td><td>NIFTY INFRA</td><td>NIFTY DIV OPPS 50</td></tr>  <tr><td>NIFTY MNC</td><td>NIFTY PSE</td><td>NIFTY SERV SECTOR</td><td>NIFTY MID100 FREE</td></tr>  <tr><td>DOL200</td><td>TECK</td><td>BSEPSU</td><td>NIFTY SML100 FREE</td></tr>  <tr><td>AUTO</td><td>BANKEX</td><td>INDIA VIX</td><td>NIFTY50 VALUE 20</td></tr></h3>   </table>  
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {String} indexName Index name of the scrip
     * @param {String} fromDate From date in yyyy-MM-dd
     * @param {Object} opts Optional parameters
     * @param {String} opts.toDate To date in yyyy-MM-dd
     * @param {module:api/HistoricalCandleDataApi~getIndexCandleDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndexCandleDataResponse}
     */
    this.getIndexCandleData = function(xSessionToken, indexName, fromDate, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling getIndexCandleData");
      }

      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling getIndexCandleData");
      }

      // verify the required parameter 'fromDate' is set
      if (fromDate === undefined || fromDate === null) {
        throw new Error("Missing the required parameter 'fromDate' when calling getIndexCandleData");
      }


      var pathParams = {
      };
      var queryParams = {
        'indexName': indexName,
        'fromDate': fromDate,
        'toDate': opts['toDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IndexCandleDataResponse;

      return this.apiClient.callApi(
        '/history/indexCandleData', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
