/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CancelOrderResponse', 'model/ModifyOrderRequest', 'model/OrderBookResponse', 'model/OrderRequest', 'model/OrderRequestBO', 'model/OrderRequestCO', 'model/OrderResponse', 'model/OrderResponseBO', 'model/OrderResponseCO', 'model/OrderStatusResponse', 'model/TriggerOrdersResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CancelOrderResponse'), require('../model/ModifyOrderRequest'), require('../model/OrderBookResponse'), require('../model/OrderRequest'), require('../model/OrderRequestBO'), require('../model/OrderRequestCO'), require('../model/OrderResponse'), require('../model/OrderResponseBO'), require('../model/OrderResponseCO'), require('../model/OrderStatusResponse'), require('../model/TriggerOrdersResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.OrdersApi = factory(root.StockNoteApiDocumentation.ApiClient, root.StockNoteApiDocumentation.CancelOrderResponse, root.StockNoteApiDocumentation.ModifyOrderRequest, root.StockNoteApiDocumentation.OrderBookResponse, root.StockNoteApiDocumentation.OrderRequest, root.StockNoteApiDocumentation.OrderRequestBO, root.StockNoteApiDocumentation.OrderRequestCO, root.StockNoteApiDocumentation.OrderResponse, root.StockNoteApiDocumentation.OrderResponseBO, root.StockNoteApiDocumentation.OrderResponseCO, root.StockNoteApiDocumentation.OrderStatusResponse, root.StockNoteApiDocumentation.TriggerOrdersResponse);
  }
}(this, function(ApiClient, CancelOrderResponse, ModifyOrderRequest, OrderBookResponse, OrderRequest, OrderRequestBO, OrderRequestCO, OrderResponse, OrderResponseBO, OrderResponseCO, OrderStatusResponse, TriggerOrdersResponse) {
  'use strict';

  /**
   * Orders service.
   * @module api/OrdersApi
   * @version 1.0
   */

  /**
   * Constructs a new OrdersApi. 
   * @alias module:api/OrdersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelOrder operation.
     * @callback module:api/OrdersApi~cancelOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Order
     * An order which is open or pending in system can be cancelled. In other words, cancellation cannot be initiated for already Executed, Rejected orders.This is for CNC, MIS and NRML Orders.
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {String} orderNumber  The order identifier provided as an input which needs to be cancelled
     * @param {module:api/OrdersApi~cancelOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelOrderResponse}
     */
    this.cancelOrder = function(xSessionToken, orderNumber, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling cancelOrder");
      }

      // verify the required parameter 'orderNumber' is set
      if (orderNumber === undefined || orderNumber === null) {
        throw new Error("Missing the required parameter 'orderNumber' when calling cancelOrder");
      }


      var pathParams = {
      };
      var queryParams = {
        'orderNumber': orderNumber,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CancelOrderResponse;

      return this.apiClient.callApi(
        '/order/cancelOrder', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelOrderBO operation.
     * @callback module:api/OrdersApi~cancelOrderBOCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel BO Order
     * For Cancellation/exit of BO orders pass main leg Order number. If main leg is in Open/Pending state that order will be cancelled.  If the main leg is executed and the sublegs are created and in open/Trigger pending state, the order will be exited.  If the main leg is executed and if either of Stop loss or target is hit, API will return error message \"SubOrder is in Executed status. Cannot exit/cancel such orders.\"
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {String} orderNumber  The main order identifier provided as an input which needs to be exited.
     * @param {module:api/OrdersApi~cancelOrderBOCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelOrderResponse}
     */
    this.cancelOrderBO = function(xSessionToken, orderNumber, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling cancelOrderBO");
      }

      // verify the required parameter 'orderNumber' is set
      if (orderNumber === undefined || orderNumber === null) {
        throw new Error("Missing the required parameter 'orderNumber' when calling cancelOrderBO");
      }


      var pathParams = {
      };
      var queryParams = {
        'orderNumber': orderNumber,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CancelOrderResponse;

      return this.apiClient.callApi(
        '/order/exitBO', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelOrderCO operation.
     * @callback module:api/OrdersApi~cancelOrderCOCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel CO Order
     * For Cancellation/exit of CO orders pass main leg Order number. If main leg is in Open/Pending state that order will be cancelled.  If the main leg is executed and the sublegs are created and in open/Trigger pending state, the order will be exited.  If the main leg is executed and if Stop loss is hit, API will return error message \"SubOrder is in Executed status. Cannot exit/cancel such orders.\"
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {String} orderNumber  The main order identifier provided as an input which needs to be exited. 
     * @param {module:api/OrdersApi~cancelOrderCOCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelOrderResponse}
     */
    this.cancelOrderCO = function(xSessionToken, orderNumber, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling cancelOrderCO");
      }

      // verify the required parameter 'orderNumber' is set
      if (orderNumber === undefined || orderNumber === null) {
        throw new Error("Missing the required parameter 'orderNumber' when calling cancelOrderCO");
      }


      var pathParams = {
      };
      var queryParams = {
        'orderNumber': orderNumber,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CancelOrderResponse;

      return this.apiClient.callApi(
        '/order/exitCO', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderBook operation.
     * @callback module:api/OrdersApi~getOrderBookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderBookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Order Book
     * Orderbook retrieves and displays details of all orders placed by the user on a specific day. This API returns all states of the orders, namely, open, pending, rejected and executed ones.
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {module:api/OrdersApi~getOrderBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderBookResponse}
     */
    this.getOrderBook = function(xSessionToken, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling getOrderBook");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderBookResponse;

      return this.apiClient.callApi(
        '/order/orderBook', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderStatus operation.
     * @callback module:api/OrdersApi~getOrderStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Order Status
     * Get status of an order placed previously. This API returns all states of the orders,but not limited to open, pending, and partially filled ones.
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {String} orderNumber  Order Number for which the user wants to check the order status
     * @param {module:api/OrdersApi~getOrderStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderStatusResponse}
     */
    this.getOrderStatus = function(xSessionToken, orderNumber, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling getOrderStatus");
      }

      // verify the required parameter 'orderNumber' is set
      if (orderNumber === undefined || orderNumber === null) {
        throw new Error("Missing the required parameter 'orderNumber' when calling getOrderStatus");
      }


      var pathParams = {
      };
      var queryParams = {
        'orderNumber': orderNumber,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderStatusResponse;

      return this.apiClient.callApi(
        '/order/getOrderStatus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTriggerOrderNumbers operation.
     * @callback module:api/OrdersApi~getTriggerOrderNumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggerOrdersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TriggerOrders
     * This API allows you to get the trigger order numbers in case of BO and CO orders so that their attribute values can be modified for BO orders, it will give the order identifiers. For Stop loss leg and target leg. Similarly for CO orders, it will return order identifier of stop loss leg only. Using the order identifier, the user would be able to modify the order attributes using the modifyOrder API. Refer modifyOrder API documentation for the parameters details.
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {String} orderNumber  Order Number for which the user wants to check the order status
     * @param {module:api/OrdersApi~getTriggerOrderNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggerOrdersResponse}
     */
    this.getTriggerOrderNumbers = function(xSessionToken, orderNumber, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling getTriggerOrderNumbers");
      }

      // verify the required parameter 'orderNumber' is set
      if (orderNumber === undefined || orderNumber === null) {
        throw new Error("Missing the required parameter 'orderNumber' when calling getTriggerOrderNumbers");
      }


      var pathParams = {
      };
      var queryParams = {
        'orderNumber': orderNumber,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TriggerOrdersResponse;

      return this.apiClient.callApi(
        '/order/getTriggerOrders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyOrder operation.
     * @callback module:api/OrdersApi~modifyOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Order
     * User would be able to modify some attributes of an order as long as it is with open/pending status in system. For modification order identifier is mandatory. With order identifier you need to send the optional parameter(s) which needs to be modified. In case the optional parameters aren't sent, the default will be considered from the original order. Modifiable attributes include quantity, Order Type (L,MKT, SL,SL-M). This API cannot be used for modifying attributes of an executed/rejected/cancelled order. Only the attribute that needs to be modified should be sent in the request alongwith the Order Identifier.
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {String} orderNumber Unique Order identifier of the order which needs to be modified
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyOrderRequest} opts.body Type of order.  MKT - Market Order,L - Limit Order, SL - Stop Loss Limit, SL-M - Stop Loss Market
     * @param {module:api/OrdersApi~modifyOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResponse}
     */
    this.modifyOrder = function(xSessionToken, orderNumber, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling modifyOrder");
      }

      // verify the required parameter 'orderNumber' is set
      if (orderNumber === undefined || orderNumber === null) {
        throw new Error("Missing the required parameter 'orderNumber' when calling modifyOrder");
      }


      var pathParams = {
        'orderNumber': orderNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResponse;

      return this.apiClient.callApi(
        '/order/modifyOrder/{orderNumber}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the placeOrder operation.
     * @callback module:api/OrdersApi~placeOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Place Order
     * This API allows you to place an equity/derivative order to the exchange i.e the place order request typically registers the order with OMS and when it happens successfully, a success response is returned. Successful placement of an order via the API does not imply its successful execution. To be precise, under normal scenarios, the whole flow of order execution starting with order placement, routing to OMS and transfer to the exchange, order execution, and confirmation from exchange happen real time. But due to various reasons like market hours, exchange related checks etc. This may not happen instantly. So when an order is successfully placed the placeOrder API returns an orderNumber in response, and in scenarios as above the actual order status can be checked separately using the orderStatus API call.This is for Placing CNC, MIS and NRML Orders 
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {Object} opts Optional parameters
     * @param {module:model/OrderRequest} opts.body 
     * @param {module:api/OrdersApi~placeOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResponse}
     */
    this.placeOrder = function(xSessionToken, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      postBody["remarksValue"]= "NodeJSSDK";
      
      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling placeOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResponse;

      return this.apiClient.callApi(
        '/order/placeOrder', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the placeOrderBO operation.
     * @callback module:api/OrdersApi~placeOrderBOCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResponseBO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Place BO Order
     * This API allows you to place an equity/derivative order to the exchange i.e the place order request typically registers the order with OMS and when it happens successfully, a success response is returned. Successful placement of an order via the API does not imply its successful execution. To be precise, under normal scenarios, the whole flow of order execution starting with order placement, routing to OMS and transfer to the exchange, order execution, and confirmation from exchange happen real time. But due to various reasons like market hours, exchange related checks etc. This may not happen instantly. So when an order is successfully placed the placeOrder API returns an orderNumber in response, and in scenarios as above the actual order status can be checked separately using the orderStatus API call. This is for Placing BO Orders. 
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {Object} opts Optional parameters
     * @param {module:model/OrderRequestBO} opts.body 
     * @param {module:api/OrdersApi~placeOrderBOCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResponseBO}
     */
    this.placeOrderBO = function(xSessionToken, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      postBody["remarksValue"]= "NodeJSSDK";
      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling placeOrderBO");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResponseBO;

      return this.apiClient.callApi(
        '/order/placeOrderBO', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the placeOrderCO operation.
     * @callback module:api/OrdersApi~placeOrderCOCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderResponseCO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Place CO Order
     * This API allows you to place an equity/derivative order to the exchange i.e the place order request typically registers the order with OMS and when it happens successfully, a success response is returned. Successful placement of an order via the API does not imply its successful execution. To be precise, under normal scenarios, the whole flow of order execution starting with order placement, routing to OMS and transfer to the exchange, order execution, and confirmation from exchange happen real time. But due to various reasons like market hours, exchange related checks etc. This may not happen instantly. So when an order is successfully placed the placeOrder API returns an orderNumber in response, and in scenarios as above the actual order status can be checked separately using the orderStatus API call. This is for Placing CO Orders.
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {Object} opts Optional parameters
     * @param {module:model/OrderRequestCO} opts.body 
     * @param {module:api/OrdersApi~placeOrderCOCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderResponseCO}
     */
    this.placeOrderCO = function(xSessionToken, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];
      postBody["remarksValue"]= "NodeJSSDK";
      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling placeOrderCO");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResponseCO;

      return this.apiClient.callApi(
        '/order/placeOrderCO', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
