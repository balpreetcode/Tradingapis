/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IndexQuoteResponse', 'model/MarketDepthResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/IndexQuoteResponse'), require('../model/MarketDepthResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.QuoteApi = factory(root.StockNoteApiDocumentation.ApiClient, root.StockNoteApiDocumentation.IndexQuoteResponse, root.StockNoteApiDocumentation.MarketDepthResponse);
  }
}(this, function(ApiClient, IndexQuoteResponse, MarketDepthResponse) {
  'use strict';

  /**
   * Quote service.
   * @module api/QuoteApi
   * @version 1.0
   */

  /**
   * Constructs a new QuoteApi. 
   * @alias module:api/QuoteApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getQuote operation.
     * @callback module:api/QuoteApi~getQuoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketDepthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Quote
     * Get market depth details for a specific equity scrip including but not limited to values like last trade price, previous close price, change value, change percentage, bids/asks, upper and lower circuit limits etc. This helps user with market picture of an equity scrip using which he will be able to place an order.
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {String} symbolName Symbol name of the scrip.For Equity enter SymbolName of the scrip & For Derivatives enter TradingSymbol of the scrip
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
     * @param {module:api/QuoteApi~getQuoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketDepthResponse}
     */
    this.getQuote = function(xSessionToken, symbolName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling getQuote");
      }

      // verify the required parameter 'symbolName' is set
      if (symbolName === undefined || symbolName === null) {
        throw new Error("Missing the required parameter 'symbolName' when calling getQuote");
      }


      var pathParams = {
      };
      var queryParams = {
        'exchange': opts['exchange'],
        'symbolName': symbolName,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MarketDepthResponse;

      return this.apiClient.callApi(
        '/quote/getQuote', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getindexQuote operation.
     * @callback module:api/QuoteApi~getindexQuoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndexQuoteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Index Quote
     * Getting Index Quote details for a specific Indicies. This helps user with market picture of an specific Index Details.
     * @param {String} xSessionToken Session token that should be used with API request is given in the response. It is used as an authenticator. A session token is valid for 24 hours or until a new login request is given, where you a new session token will be generated and the previous one will get expired.
     * @param {String} indexName Index name of the scrip.
     * @param {module:api/QuoteApi~getindexQuoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndexQuoteResponse}
     */
    this.getindexQuote = function(xSessionToken, indexName, callback) {
      var postBody = null;

      // verify the required parameter 'xSessionToken' is set
      if (xSessionToken === undefined || xSessionToken === null) {
        throw new Error("Missing the required parameter 'xSessionToken' when calling getindexQuote");
      }

      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling getindexQuote");
      }


      var pathParams = {
      };
      var queryParams = {
        'indexName': indexName,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'x-session-token': xSessionToken
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IndexQuoteResponse;

      return this.apiClient.callApi(
        '/quote/indexQuote', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
