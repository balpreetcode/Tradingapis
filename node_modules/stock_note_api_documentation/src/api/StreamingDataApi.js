/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/StreamingMarkDataRequest', 'model/StreamingMarkDataResponse', 'model/StreamingQuoteDataRequest', 'model/StreamingQuoteDataResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/StreamingMarkDataRequest'), require('../model/StreamingMarkDataResponse'), require('../model/StreamingQuoteDataRequest'), require('../model/StreamingQuoteDataResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.StreamingDataApi = factory(root.StockNoteApiDocumentation.ApiClient, root.StockNoteApiDocumentation.StreamingMarkDataRequest, root.StockNoteApiDocumentation.StreamingMarkDataResponse, root.StockNoteApiDocumentation.StreamingQuoteDataRequest, root.StockNoteApiDocumentation.StreamingQuoteDataResponse);
  }
}(this, function(ApiClient, StreamingMarkDataRequest, StreamingMarkDataResponse, StreamingQuoteDataRequest, StreamingQuoteDataResponse) {
  'use strict';

  /**
   * StreamingData service.
   * @module api/StreamingDataApi
   * @version 1.0
   */

  /**
   * Constructs a new StreamingDataApi. 
   * @alias module:api/StreamingDataApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getStreamingForMarketData operation.
     * @callback module:api/StreamingDataApi~getStreamingForMarketDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingMarkDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Streaming Market Data
     * StockNote API platform provides the Broadcast API, as the most effective way to receive market data for instruments across all exchanges during live market hours. The API provides continuous streaming data of market data based on user request, and primarily consists of fields such as 5 levels of bid/offer market depth data etc.              The API uses WebSocket protocol to establish a dedicated TCP connection after an HTTP handshake to receive streaming quotes and thereby provides seamless streaming of market data. You need to use a WebSocket client to connect to our broadcast API. If you have already subscribed to our StockNote API services, you will be able to access broadcast API too.              
     * @param {Object} opts Optional parameters
     * @param {module:model/StreamingMarkDataRequest} opts.body 
     * @param {module:api/StreamingDataApi~getStreamingForMarketDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingMarkDataResponse}
     */
    this.getStreamingForMarketData = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StreamingMarkDataResponse;

      return this.apiClient.callApi(
        '/wss:/stream.stocknote.com/.', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStreamingForQuote operation.
     * @callback module:api/StreamingDataApi~getStreamingForQuoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamingQuoteDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Streaming Quote Data
     * StockNote API platform provides the Broadcast API, as the most effective way to receive quote data for instruments across all exchanges during live market hours. The API provides continuous streaming data of quote based on user request, and primarily consists of fields such as last traded price, open, high, low, close, last traded quantity, last traded volume, last traded time etc.              The API uses WebSocket protocol to establish a dedicated TCP connection after an HTTP handshake to receive streaming quotes and thereby provides seamless streaming of quote data. You need to use a WebSocket client to connect to our broadcast API. If you have already subscribed to our StockNote API services, you will be able to access broadcast API too.              
     * @param {Object} opts Optional parameters
     * @param {module:model/StreamingQuoteDataRequest} opts.body 
     * @param {module:api/StreamingDataApi~getStreamingForQuoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamingQuoteDataResponse}
     */
    this.getStreamingForQuote = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StreamingQuoteDataResponse;

      return this.apiClient.callApi(
        '/wss:/stream.stocknote.com', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
