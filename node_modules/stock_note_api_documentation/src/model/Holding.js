/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.Holding = factory(root.StockNoteApiDocumentation.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Holding model module.
   * @module model/Holding
   * @version 1.0
   */

  /**
   * Constructs a new <code>Holding</code>.
   * @alias module:model/Holding
   * @class
   * @param averagePrice {String} Average trading price of the equity
   * @param exchange {String} Name of the exchange.Valid exchanges values (BSE/ NSE) If the user does not provide an exchange name, by default considered as NSE.
   * @param markToMarketPrice {String} Price change between previous close price and current price
   * @param lastTradedPrice {String} Price at which last transaction/trade is done
   * @param previousClose {String} Previous close refers to the prior day's final price of security when the market officially closes for the day.
   * @param productCode {String} Type of the product, allowable type is CNC
   * @param symbolDescription {String} Scrip Description 
   * @param tradingSymbol {String} Trading Symbol of the scrip.
   * @param totalGainAndLoss {String} Total Gain/Loss for all existing positions since their creation
   * @param calculatedNetQuantity {String} Quantity left after the day
   * @param holdingsQuantity {String} Currently holding(CNC) quantity
   * @param collateralQuantity {String} Quantity of loan against shares offered by SAMCO to their clients for trading in stock and shares.
   * @param holdingsValue {String} Limit value of the available holdings.
   * @param isin {String} The standard ISIN representing stocks uniquely at international level. It is same for every exchange.
   * @param sellableQuantity {String} Quantity which is  open for sale.
   * @param totalMarketToMarketPrice {String} Total price change between previous close price and current price
   */
  var exports = function(averagePrice, exchange, markToMarketPrice, lastTradedPrice, previousClose, productCode, symbolDescription, tradingSymbol, totalGainAndLoss, calculatedNetQuantity, holdingsQuantity, collateralQuantity, holdingsValue, isin, sellableQuantity, totalMarketToMarketPrice) {
    this.averagePrice = averagePrice;
    this.exchange = exchange;
    this.markToMarketPrice = markToMarketPrice;
    this.lastTradedPrice = lastTradedPrice;
    this.previousClose = previousClose;
    this.productCode = productCode;
    this.symbolDescription = symbolDescription;
    this.tradingSymbol = tradingSymbol;
    this.totalGainAndLoss = totalGainAndLoss;
    this.calculatedNetQuantity = calculatedNetQuantity;
    this.holdingsQuantity = holdingsQuantity;
    this.collateralQuantity = collateralQuantity;
    this.holdingsValue = holdingsValue;
    this.isin = isin;
    this.sellableQuantity = sellableQuantity;
    this.totalMarketToMarketPrice = totalMarketToMarketPrice;
  };

  /**
   * Constructs a <code>Holding</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Holding} obj Optional instance to populate.
   * @return {module:model/Holding} The populated <code>Holding</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('averagePrice'))
        obj.averagePrice = ApiClient.convertToType(data['averagePrice'], 'String');
      if (data.hasOwnProperty('exchange'))
        obj.exchange = ApiClient.convertToType(data['exchange'], 'String');
      if (data.hasOwnProperty('markToMarketPrice'))
        obj.markToMarketPrice = ApiClient.convertToType(data['markToMarketPrice'], 'String');
      if (data.hasOwnProperty('lastTradedPrice'))
        obj.lastTradedPrice = ApiClient.convertToType(data['lastTradedPrice'], 'String');
      if (data.hasOwnProperty('previousClose'))
        obj.previousClose = ApiClient.convertToType(data['previousClose'], 'String');
      if (data.hasOwnProperty('productCode'))
        obj.productCode = ApiClient.convertToType(data['productCode'], 'String');
      if (data.hasOwnProperty('symbolDescription'))
        obj.symbolDescription = ApiClient.convertToType(data['symbolDescription'], 'String');
      if (data.hasOwnProperty('tradingSymbol'))
        obj.tradingSymbol = ApiClient.convertToType(data['tradingSymbol'], 'String');
      if (data.hasOwnProperty('totalGainAndLoss'))
        obj.totalGainAndLoss = ApiClient.convertToType(data['totalGainAndLoss'], 'String');
      if (data.hasOwnProperty('calculatedNetQuantity'))
        obj.calculatedNetQuantity = ApiClient.convertToType(data['calculatedNetQuantity'], 'String');
      if (data.hasOwnProperty('holdingsQuantity'))
        obj.holdingsQuantity = ApiClient.convertToType(data['holdingsQuantity'], 'String');
      if (data.hasOwnProperty('collateralQuantity'))
        obj.collateralQuantity = ApiClient.convertToType(data['collateralQuantity'], 'String');
      if (data.hasOwnProperty('holdingsValue'))
        obj.holdingsValue = ApiClient.convertToType(data['holdingsValue'], 'String');
      if (data.hasOwnProperty('isin'))
        obj.isin = ApiClient.convertToType(data['isin'], 'String');
      if (data.hasOwnProperty('sellableQuantity'))
        obj.sellableQuantity = ApiClient.convertToType(data['sellableQuantity'], 'String');
      if (data.hasOwnProperty('totalMarketToMarketPrice'))
        obj.totalMarketToMarketPrice = ApiClient.convertToType(data['totalMarketToMarketPrice'], 'String');
    }
    return obj;
  }

  /**
   * Average trading price of the equity
   * @member {String} averagePrice
   */
  exports.prototype.averagePrice = undefined;

  /**
   * Name of the exchange.Valid exchanges values (BSE/ NSE) If the user does not provide an exchange name, by default considered as NSE.
   * @member {String} exchange
   */
  exports.prototype.exchange = undefined;

  /**
   * Price change between previous close price and current price
   * @member {String} markToMarketPrice
   */
  exports.prototype.markToMarketPrice = undefined;

  /**
   * Price at which last transaction/trade is done
   * @member {String} lastTradedPrice
   */
  exports.prototype.lastTradedPrice = undefined;

  /**
   * Previous close refers to the prior day's final price of security when the market officially closes for the day.
   * @member {String} previousClose
   */
  exports.prototype.previousClose = undefined;

  /**
   * Type of the product, allowable type is CNC
   * @member {String} productCode
   */
  exports.prototype.productCode = undefined;

  /**
   * Scrip Description 
   * @member {String} symbolDescription
   */
  exports.prototype.symbolDescription = undefined;

  /**
   * Trading Symbol of the scrip.
   * @member {String} tradingSymbol
   */
  exports.prototype.tradingSymbol = undefined;

  /**
   * Total Gain/Loss for all existing positions since their creation
   * @member {String} totalGainAndLoss
   */
  exports.prototype.totalGainAndLoss = undefined;

  /**
   * Quantity left after the day
   * @member {String} calculatedNetQuantity
   */
  exports.prototype.calculatedNetQuantity = undefined;

  /**
   * Currently holding(CNC) quantity
   * @member {String} holdingsQuantity
   */
  exports.prototype.holdingsQuantity = undefined;

  /**
   * Quantity of loan against shares offered by SAMCO to their clients for trading in stock and shares.
   * @member {String} collateralQuantity
   */
  exports.prototype.collateralQuantity = undefined;

  /**
   * Limit value of the available holdings.
   * @member {String} holdingsValue
   */
  exports.prototype.holdingsValue = undefined;

  /**
   * The standard ISIN representing stocks uniquely at international level. It is same for every exchange.
   * @member {String} isin
   */
  exports.prototype.isin = undefined;

  /**
   * Quantity which is  open for sale.
   * @member {String} sellableQuantity
   */
  exports.prototype.sellableQuantity = undefined;

  /**
   * Total price change between previous close price and current price
   * @member {String} totalMarketToMarketPrice
   */
  exports.prototype.totalMarketToMarketPrice = undefined;

  return exports;

}));
