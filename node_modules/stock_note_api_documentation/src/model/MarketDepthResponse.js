/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BidAsk'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BidAsk'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.MarketDepthResponse = factory(root.StockNoteApiDocumentation.ApiClient, root.StockNoteApiDocumentation.BidAsk);
  }
}(this, function(ApiClient, BidAsk) {
  'use strict';

  /**
   * The MarketDepthResponse model module.
   * @module model/MarketDepthResponse
   * @version 1.0
   */

  /**
   * Constructs a new <code>MarketDepthResponse</code>.
   * @alias module:model/MarketDepthResponse
   * @class
   * @param serverTime {String} Time at Server.
   * @param msgId {String} This is a unique identifier for every request into the system. Please quote this identifier to the support team if you face issues with the API request.
   * @param status {String} It would be success or failure
   * @param statusMessage {String} Status message of the Quote request
   * @param symbolName {String} Symbol name of the scrip.
   * @param tradingSymbol {String} Trading Symbol of the scrip.
   * @param exchange {String} Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
   * @param companyName {String} Full name of the company
   * @param lastTradedTime {String} Time of the last transaction
   * @param lastTradedPrice {String} Price at which last transaction / trade is done
   * @param previousClose {String} Previous close refers to the prior day's final price of a security when the market officially closes for the day
   * @param changeValue {String} Change value is the difference between the current value and the previous day's market close
   * @param changePercentage {String} Percentage of change between the current value and the previous day's market close
   * @param lastTradedQuantity {String} Quantity of last transaction
   * @param lowerCircuitLimit {String} Limit below which a stock price cannot trade on a particular trading day
   * @param upperCircuitLimit {String} Limit above which a stock price cannot trade on a particular trading day
   * @param averagePrice {String} Average price of the trading
   * @param openValue {String} Opening price of a market snapshot
   * @param highValue {String} High value of market snapshot
   * @param lowValue {String} Low value of market snapshot
   * @param closeValue {String} Close value of market snapshot
   * @param totalBuyQuantity {String} Total quantity of BUY transaction
   * @param totalSellQuantity {String} Total quantity of SELL transaction
   * @param totalTradedValue {String} Value of total trade made for the scrip
   * @param totalTradedVolume {String} Total volume of trading done
   * @param yearlyHighPrice {String} 52 week high
   * @param yearlyLowPrice {String} 52 week low
   * @param tickSize {String} The value of a single price tick. Default value is 0.05
   * @param openInterest {String} Open interest is the Number of existing contracts held by buyers or sellers for any market for any given day.
   * @param bestBids {Array.<module:model/BidAsk>} Most frequent trading bids for BUY
   * @param bestAsks {Array.<module:model/BidAsk>} Most frequent trading asked for SELL
   * @param expiryDate {String} Expiry date of the scrip
   * @param spotPrice {String} Spot price. Applicable in case of Futures and Options
   * @param instrument {String} Instrument Name.
   * @param lotQuantity {String} Lot quantity. Applicable for F & O
   * @param listingId {String} Identifier assigned to the scrip by exchange in the format <<listing code>>_<<exchange>>
   * @param openInterestChange {String} It shows Open interest change in Number of contracts held for market
   * @param oIChangePer {String} It will shows the change % based on Open Interest
   */
  var exports = function(serverTime, msgId, status, statusMessage, symbolName, tradingSymbol, exchange, companyName, lastTradedTime, lastTradedPrice, previousClose, changeValue, changePercentage, lastTradedQuantity, lowerCircuitLimit, upperCircuitLimit, averagePrice, openValue, highValue, lowValue, closeValue, totalBuyQuantity, totalSellQuantity, totalTradedValue, totalTradedVolume, yearlyHighPrice, yearlyLowPrice, tickSize, openInterest, bestBids, bestAsks, expiryDate, spotPrice, instrument, lotQuantity, listingId, openInterestChange, oIChangePer) {
    this.serverTime = serverTime;
    this.msgId = msgId;
    this.status = status;
    this.statusMessage = statusMessage;
    this.symbolName = symbolName;
    this.tradingSymbol = tradingSymbol;
    this.exchange = exchange;
    this.companyName = companyName;
    this.lastTradedTime = lastTradedTime;
    this.lastTradedPrice = lastTradedPrice;
    this.previousClose = previousClose;
    this.changeValue = changeValue;
    this.changePercentage = changePercentage;
    this.lastTradedQuantity = lastTradedQuantity;
    this.lowerCircuitLimit = lowerCircuitLimit;
    this.upperCircuitLimit = upperCircuitLimit;
    this.averagePrice = averagePrice;
    this.openValue = openValue;
    this.highValue = highValue;
    this.lowValue = lowValue;
    this.closeValue = closeValue;
    this.totalBuyQuantity = totalBuyQuantity;
    this.totalSellQuantity = totalSellQuantity;
    this.totalTradedValue = totalTradedValue;
    this.totalTradedVolume = totalTradedVolume;
    this.yearlyHighPrice = yearlyHighPrice;
    this.yearlyLowPrice = yearlyLowPrice;
    this.tickSize = tickSize;
    this.openInterest = openInterest;
    this.bestBids = bestBids;
    this.bestAsks = bestAsks;
    this.expiryDate = expiryDate;
    this.spotPrice = spotPrice;
    this.instrument = instrument;
    this.lotQuantity = lotQuantity;
    this.listingId = listingId;
    this.openInterestChange = openInterestChange;
    this.oIChangePer = oIChangePer;
  };

  /**
   * Constructs a <code>MarketDepthResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MarketDepthResponse} obj Optional instance to populate.
   * @return {module:model/MarketDepthResponse} The populated <code>MarketDepthResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('serverTime'))
        obj.serverTime = ApiClient.convertToType(data['serverTime'], 'String');
      if (data.hasOwnProperty('msgId'))
        obj.msgId = ApiClient.convertToType(data['msgId'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('statusMessage'))
        obj.statusMessage = ApiClient.convertToType(data['statusMessage'], 'String');
      if (data.hasOwnProperty('symbolName'))
        obj.symbolName = ApiClient.convertToType(data['symbolName'], 'String');
      if (data.hasOwnProperty('tradingSymbol'))
        obj.tradingSymbol = ApiClient.convertToType(data['tradingSymbol'], 'String');
      if (data.hasOwnProperty('exchange'))
        obj.exchange = ApiClient.convertToType(data['exchange'], 'String');
      if (data.hasOwnProperty('companyName'))
        obj.companyName = ApiClient.convertToType(data['companyName'], 'String');
      if (data.hasOwnProperty('lastTradedTime'))
        obj.lastTradedTime = ApiClient.convertToType(data['lastTradedTime'], 'String');
      if (data.hasOwnProperty('lastTradedPrice'))
        obj.lastTradedPrice = ApiClient.convertToType(data['lastTradedPrice'], 'String');
      if (data.hasOwnProperty('previousClose'))
        obj.previousClose = ApiClient.convertToType(data['previousClose'], 'String');
      if (data.hasOwnProperty('changeValue'))
        obj.changeValue = ApiClient.convertToType(data['changeValue'], 'String');
      if (data.hasOwnProperty('changePercentage'))
        obj.changePercentage = ApiClient.convertToType(data['changePercentage'], 'String');
      if (data.hasOwnProperty('lastTradedQuantity'))
        obj.lastTradedQuantity = ApiClient.convertToType(data['lastTradedQuantity'], 'String');
      if (data.hasOwnProperty('lowerCircuitLimit'))
        obj.lowerCircuitLimit = ApiClient.convertToType(data['lowerCircuitLimit'], 'String');
      if (data.hasOwnProperty('upperCircuitLimit'))
        obj.upperCircuitLimit = ApiClient.convertToType(data['upperCircuitLimit'], 'String');
      if (data.hasOwnProperty('averagePrice'))
        obj.averagePrice = ApiClient.convertToType(data['averagePrice'], 'String');
      if (data.hasOwnProperty('openValue'))
        obj.openValue = ApiClient.convertToType(data['openValue'], 'String');
      if (data.hasOwnProperty('highValue'))
        obj.highValue = ApiClient.convertToType(data['highValue'], 'String');
      if (data.hasOwnProperty('lowValue'))
        obj.lowValue = ApiClient.convertToType(data['lowValue'], 'String');
      if (data.hasOwnProperty('closeValue'))
        obj.closeValue = ApiClient.convertToType(data['closeValue'], 'String');
      if (data.hasOwnProperty('totalBuyQuantity'))
        obj.totalBuyQuantity = ApiClient.convertToType(data['totalBuyQuantity'], 'String');
      if (data.hasOwnProperty('totalSellQuantity'))
        obj.totalSellQuantity = ApiClient.convertToType(data['totalSellQuantity'], 'String');
      if (data.hasOwnProperty('totalTradedValue'))
        obj.totalTradedValue = ApiClient.convertToType(data['totalTradedValue'], 'String');
      if (data.hasOwnProperty('totalTradedVolume'))
        obj.totalTradedVolume = ApiClient.convertToType(data['totalTradedVolume'], 'String');
      if (data.hasOwnProperty('yearlyHighPrice'))
        obj.yearlyHighPrice = ApiClient.convertToType(data['yearlyHighPrice'], 'String');
      if (data.hasOwnProperty('yearlyLowPrice'))
        obj.yearlyLowPrice = ApiClient.convertToType(data['yearlyLowPrice'], 'String');
      if (data.hasOwnProperty('tickSize'))
        obj.tickSize = ApiClient.convertToType(data['tickSize'], 'String');
      if (data.hasOwnProperty('openInterest'))
        obj.openInterest = ApiClient.convertToType(data['openInterest'], 'String');
      if (data.hasOwnProperty('bestBids'))
        obj.bestBids = ApiClient.convertToType(data['bestBids'], [BidAsk]);
      if (data.hasOwnProperty('bestAsks'))
        obj.bestAsks = ApiClient.convertToType(data['bestAsks'], [BidAsk]);
      if (data.hasOwnProperty('expiryDate'))
        obj.expiryDate = ApiClient.convertToType(data['expiryDate'], 'String');
      if (data.hasOwnProperty('spotPrice'))
        obj.spotPrice = ApiClient.convertToType(data['spotPrice'], 'String');
      if (data.hasOwnProperty('instrument'))
        obj.instrument = ApiClient.convertToType(data['instrument'], 'String');
      if (data.hasOwnProperty('lotQuantity'))
        obj.lotQuantity = ApiClient.convertToType(data['lotQuantity'], 'String');
      if (data.hasOwnProperty('listingId'))
        obj.listingId = ApiClient.convertToType(data['listingId'], 'String');
      if (data.hasOwnProperty('openInterestChange'))
        obj.openInterestChange = ApiClient.convertToType(data['openInterestChange'], 'String');
      if (data.hasOwnProperty('oIChangePer'))
        obj.oIChangePer = ApiClient.convertToType(data['oIChangePer'], 'String');
    }
    return obj;
  }

  /**
   * Time at Server.
   * @member {String} serverTime
   */
  exports.prototype.serverTime = undefined;

  /**
   * This is a unique identifier for every request into the system. Please quote this identifier to the support team if you face issues with the API request.
   * @member {String} msgId
   */
  exports.prototype.msgId = undefined;

  /**
   * It would be success or failure
   * @member {String} status
   */
  exports.prototype.status = undefined;

  /**
   * Status message of the Quote request
   * @member {String} statusMessage
   */
  exports.prototype.statusMessage = undefined;

  /**
   * Symbol name of the scrip.
   * @member {String} symbolName
   */
  exports.prototype.symbolName = undefined;

  /**
   * Trading Symbol of the scrip.
   * @member {String} tradingSymbol
   */
  exports.prototype.tradingSymbol = undefined;

  /**
   * Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
   * @member {String} exchange
   */
  exports.prototype.exchange = undefined;

  /**
   * Full name of the company
   * @member {String} companyName
   */
  exports.prototype.companyName = undefined;

  /**
   * Time of the last transaction
   * @member {String} lastTradedTime
   */
  exports.prototype.lastTradedTime = undefined;

  /**
   * Price at which last transaction / trade is done
   * @member {String} lastTradedPrice
   */
  exports.prototype.lastTradedPrice = undefined;

  /**
   * Previous close refers to the prior day's final price of a security when the market officially closes for the day
   * @member {String} previousClose
   */
  exports.prototype.previousClose = undefined;

  /**
   * Change value is the difference between the current value and the previous day's market close
   * @member {String} changeValue
   */
  exports.prototype.changeValue = undefined;

  /**
   * Percentage of change between the current value and the previous day's market close
   * @member {String} changePercentage
   */
  exports.prototype.changePercentage = undefined;

  /**
   * Quantity of last transaction
   * @member {String} lastTradedQuantity
   */
  exports.prototype.lastTradedQuantity = undefined;

  /**
   * Limit below which a stock price cannot trade on a particular trading day
   * @member {String} lowerCircuitLimit
   */
  exports.prototype.lowerCircuitLimit = undefined;

  /**
   * Limit above which a stock price cannot trade on a particular trading day
   * @member {String} upperCircuitLimit
   */
  exports.prototype.upperCircuitLimit = undefined;

  /**
   * Average price of the trading
   * @member {String} averagePrice
   */
  exports.prototype.averagePrice = undefined;

  /**
   * Opening price of a market snapshot
   * @member {String} openValue
   */
  exports.prototype.openValue = undefined;

  /**
   * High value of market snapshot
   * @member {String} highValue
   */
  exports.prototype.highValue = undefined;

  /**
   * Low value of market snapshot
   * @member {String} lowValue
   */
  exports.prototype.lowValue = undefined;

  /**
   * Close value of market snapshot
   * @member {String} closeValue
   */
  exports.prototype.closeValue = undefined;

  /**
   * Total quantity of BUY transaction
   * @member {String} totalBuyQuantity
   */
  exports.prototype.totalBuyQuantity = undefined;

  /**
   * Total quantity of SELL transaction
   * @member {String} totalSellQuantity
   */
  exports.prototype.totalSellQuantity = undefined;

  /**
   * Value of total trade made for the scrip
   * @member {String} totalTradedValue
   */
  exports.prototype.totalTradedValue = undefined;

  /**
   * Total volume of trading done
   * @member {String} totalTradedVolume
   */
  exports.prototype.totalTradedVolume = undefined;

  /**
   * 52 week high
   * @member {String} yearlyHighPrice
   */
  exports.prototype.yearlyHighPrice = undefined;

  /**
   * 52 week low
   * @member {String} yearlyLowPrice
   */
  exports.prototype.yearlyLowPrice = undefined;

  /**
   * The value of a single price tick. Default value is 0.05
   * @member {String} tickSize
   */
  exports.prototype.tickSize = undefined;

  /**
   * Open interest is the Number of existing contracts held by buyers or sellers for any market for any given day.
   * @member {String} openInterest
   */
  exports.prototype.openInterest = undefined;

  /**
   * Most frequent trading bids for BUY
   * @member {Array.<module:model/BidAsk>} bestBids
   */
  exports.prototype.bestBids = undefined;

  /**
   * Most frequent trading asked for SELL
   * @member {Array.<module:model/BidAsk>} bestAsks
   */
  exports.prototype.bestAsks = undefined;

  /**
   * Expiry date of the scrip
   * @member {String} expiryDate
   */
  exports.prototype.expiryDate = undefined;

  /**
   * Spot price. Applicable in case of Futures and Options
   * @member {String} spotPrice
   */
  exports.prototype.spotPrice = undefined;

  /**
   * Instrument Name.
   * @member {String} instrument
   */
  exports.prototype.instrument = undefined;

  /**
   * Lot quantity. Applicable for F & O
   * @member {String} lotQuantity
   */
  exports.prototype.lotQuantity = undefined;

  /**
   * Identifier assigned to the scrip by exchange in the format <<listing code>>_<<exchange>>
   * @member {String} listingId
   */
  exports.prototype.listingId = undefined;

  /**
   * It shows Open interest change in Number of contracts held for market
   * @member {String} openInterestChange
   */
  exports.prototype.openInterestChange = undefined;

  /**
   * It will shows the change % based on Open Interest
   * @member {String} oIChangePer
   */
  exports.prototype.oIChangePer = undefined;

  return exports;

}));
