/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BidAsk'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BidAsk'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.OptionChain = factory(root.StockNoteApiDocumentation.ApiClient, root.StockNoteApiDocumentation.BidAsk);
  }
}(this, function(ApiClient, BidAsk) {
  'use strict';

  /**
   * The OptionChain model module.
   * @module model/OptionChain
   * @version 1.0
   */

  /**
   * Constructs a new <code>OptionChain</code>.
   * @alias module:model/OptionChain
   * @class
   * @param tradingSymbol {String} Trading Symbol of the scrip.
   * @param exchange {String} Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
   * @param symbol {String} Symbol Code of the trading Symbol
   * @param strikePrice {String} The strike price is the predetermined price at which a put buyer can sell the underlying asset.
   * @param expiryDate {String} Shows expiry date of a trading symbol.
   * @param instrument {String} Instrument Name.
   * @param optionType {String} Option Type (PE/CE). 
   * @param underLyingSymbol {String} Root symbol of TradingSymbol
   * @param spotPrice {String} Spot price. Applicable in case of Futures and Options
   * @param lastTradedPrice {String} Price at which last transaction / trade is done
   * @param openInterest {String} Open interest is the Number of existing contracts held by buyers or sellers for any market for any given day.
   * @param openInterestChange {String} It shows Open interest change in Number of contracts held for market
   * @param oichangePer {String} It will shows the change % based on Open Interest
   * @param volume {String} Limit amount of a security traded on the specific day
   * @param bestBids {Array.<module:model/BidAsk>} Most frequent trading bids for BUY
   * @param bestAsks {Array.<module:model/BidAsk>} Most frequent trading asked for SELL
   */
  var exports = function(tradingSymbol, exchange, symbol, strikePrice, expiryDate, instrument, optionType, underLyingSymbol, spotPrice, lastTradedPrice, openInterest, openInterestChange, oichangePer, volume, bestBids, bestAsks) {
    this.tradingSymbol = tradingSymbol;
    this.exchange = exchange;
    this.symbol = symbol;
    this.strikePrice = strikePrice;
    this.expiryDate = expiryDate;
    this.instrument = instrument;
    this.optionType = optionType;
    this.underLyingSymbol = underLyingSymbol;
    this.spotPrice = spotPrice;
    this.lastTradedPrice = lastTradedPrice;
    this.openInterest = openInterest;
    this.openInterestChange = openInterestChange;
    this.oichangePer = oichangePer;
    this.volume = volume;
    this.bestBids = bestBids;
    this.bestAsks = bestAsks;
  };

  /**
   * Constructs a <code>OptionChain</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OptionChain} obj Optional instance to populate.
   * @return {module:model/OptionChain} The populated <code>OptionChain</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('tradingSymbol'))
        obj.tradingSymbol = ApiClient.convertToType(data['tradingSymbol'], 'String');
      if (data.hasOwnProperty('exchange'))
        obj.exchange = ApiClient.convertToType(data['exchange'], 'String');
      if (data.hasOwnProperty('symbol'))
        obj.symbol = ApiClient.convertToType(data['symbol'], 'String');
      if (data.hasOwnProperty('strikePrice'))
        obj.strikePrice = ApiClient.convertToType(data['strikePrice'], 'String');
      if (data.hasOwnProperty('expiryDate'))
        obj.expiryDate = ApiClient.convertToType(data['expiryDate'], 'String');
      if (data.hasOwnProperty('instrument'))
        obj.instrument = ApiClient.convertToType(data['instrument'], 'String');
      if (data.hasOwnProperty('optionType'))
        obj.optionType = ApiClient.convertToType(data['optionType'], 'String');
      if (data.hasOwnProperty('underLyingSymbol'))
        obj.underLyingSymbol = ApiClient.convertToType(data['underLyingSymbol'], 'String');
      if (data.hasOwnProperty('spotPrice'))
        obj.spotPrice = ApiClient.convertToType(data['spotPrice'], 'String');
      if (data.hasOwnProperty('lastTradedPrice'))
        obj.lastTradedPrice = ApiClient.convertToType(data['lastTradedPrice'], 'String');
      if (data.hasOwnProperty('openInterest'))
        obj.openInterest = ApiClient.convertToType(data['openInterest'], 'String');
      if (data.hasOwnProperty('openInterestChange'))
        obj.openInterestChange = ApiClient.convertToType(data['openInterestChange'], 'String');
      if (data.hasOwnProperty('oichangePer'))
        obj.oichangePer = ApiClient.convertToType(data['oichangePer'], 'String');
      if (data.hasOwnProperty('volume'))
        obj.volume = ApiClient.convertToType(data['volume'], 'String');
      if (data.hasOwnProperty('bestBids'))
        obj.bestBids = ApiClient.convertToType(data['bestBids'], [BidAsk]);
      if (data.hasOwnProperty('bestAsks'))
        obj.bestAsks = ApiClient.convertToType(data['bestAsks'], [BidAsk]);
    }
    return obj;
  }

  /**
   * Trading Symbol of the scrip.
   * @member {String} tradingSymbol
   */
  exports.prototype.tradingSymbol = undefined;

  /**
   * Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
   * @member {String} exchange
   */
  exports.prototype.exchange = undefined;

  /**
   * Symbol Code of the trading Symbol
   * @member {String} symbol
   */
  exports.prototype.symbol = undefined;

  /**
   * The strike price is the predetermined price at which a put buyer can sell the underlying asset.
   * @member {String} strikePrice
   */
  exports.prototype.strikePrice = undefined;

  /**
   * Shows expiry date of a trading symbol.
   * @member {String} expiryDate
   */
  exports.prototype.expiryDate = undefined;

  /**
   * Instrument Name.
   * @member {String} instrument
   */
  exports.prototype.instrument = undefined;

  /**
   * Option Type (PE/CE). 
   * @member {String} optionType
   */
  exports.prototype.optionType = undefined;

  /**
   * Root symbol of TradingSymbol
   * @member {String} underLyingSymbol
   */
  exports.prototype.underLyingSymbol = undefined;

  /**
   * Spot price. Applicable in case of Futures and Options
   * @member {String} spotPrice
   */
  exports.prototype.spotPrice = undefined;

  /**
   * Price at which last transaction / trade is done
   * @member {String} lastTradedPrice
   */
  exports.prototype.lastTradedPrice = undefined;

  /**
   * Open interest is the Number of existing contracts held by buyers or sellers for any market for any given day.
   * @member {String} openInterest
   */
  exports.prototype.openInterest = undefined;

  /**
   * It shows Open interest change in Number of contracts held for market
   * @member {String} openInterestChange
   */
  exports.prototype.openInterestChange = undefined;

  /**
   * It will shows the change % based on Open Interest
   * @member {String} oichangePer
   */
  exports.prototype.oichangePer = undefined;

  /**
   * Limit amount of a security traded on the specific day
   * @member {String} volume
   */
  exports.prototype.volume = undefined;

  /**
   * Most frequent trading bids for BUY
   * @member {Array.<module:model/BidAsk>} bestBids
   */
  exports.prototype.bestBids = undefined;

  /**
   * Most frequent trading asked for SELL
   * @member {Array.<module:model/BidAsk>} bestAsks
   */
  exports.prototype.bestAsks = undefined;

  return exports;

}));
