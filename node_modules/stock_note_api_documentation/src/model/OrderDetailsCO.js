/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.OrderDetailsCO = factory(root.StockNoteApiDocumentation.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The OrderDetailsCO model module.
   * @module model/OrderDetailsCO
   * @version 1.0
   */

  /**
   * Constructs a new <code>OrderDetailsCO</code>.
   * @alias module:model/OrderDetailsCO
   * @class
   * @param pendingQuantity {String} Quantity which is in waiting state to be filled in a specific trade
   * @param avgExecutionPrice {String} Average price at which the quantities were bought/sold during the day
   * @param orderPlacedBy {String} Client code of the user who placed the order
   * @param tradingSymbol {String} Trading Symbol of the scrip.
   * @param triggerPrice {String} The price at which an order should be triggered in case of SL, SL-M.
   * @param exchange {String} Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
   * @param totalQuantity {String} Total Quantity 
   * @param expiry {String} expiry date of trading symbol
   * @param transactionType {String} Type of the transaction, BUY / SELL.
   * @param productType {String} Product Type of order as placed by the user is CO (Cover Order)
   * @param orderType {String} Type of order user has placed . It can be one of the following, MKT - Market Order,L- Limit Order,SL - Stop Loss Limit,SL-M - Stop loss market.
   * @param quantity {String} Order Quantity as placed by the user
   * @param filledQuantity {String} Quantity which is filled in a specific trade. Can be less than or equal to the total quantity
   * @param orderPrice {String} Limit price entered at the time of placing the order.
   * @param filledPrice {String} Price at which exchange has filled the order
   * @param exchangeOrderNo {String} Order identifier at the exchange.
   * @param orderValidity {String} validity of the order
   * @param orderTime {String} Order placement time
   */
  var exports = function(pendingQuantity, avgExecutionPrice, orderPlacedBy, tradingSymbol, triggerPrice, exchange, totalQuantity, expiry, transactionType, productType, orderType, quantity, filledQuantity, orderPrice, filledPrice, exchangeOrderNo, orderValidity, orderTime) {
    this.pendingQuantity = pendingQuantity;
    this.avgExecutionPrice = avgExecutionPrice;
    this.orderPlacedBy = orderPlacedBy;
    this.tradingSymbol = tradingSymbol;
    this.triggerPrice = triggerPrice;
    this.exchange = exchange;
    this.totalQuantity = totalQuantity;
    this.expiry = expiry;
    this.transactionType = transactionType;
    this.productType = productType;
    this.orderType = orderType;
    this.quantity = quantity;
    this.filledQuantity = filledQuantity;
    this.orderPrice = orderPrice;
    this.filledPrice = filledPrice;
    this.exchangeOrderNo = exchangeOrderNo;
    this.orderValidity = orderValidity;
    this.orderTime = orderTime;
  };

  /**
   * Constructs a <code>OrderDetailsCO</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OrderDetailsCO} obj Optional instance to populate.
   * @return {module:model/OrderDetailsCO} The populated <code>OrderDetailsCO</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('pendingQuantity'))
        obj.pendingQuantity = ApiClient.convertToType(data['pendingQuantity'], 'String');
      if (data.hasOwnProperty('avgExecutionPrice'))
        obj.avgExecutionPrice = ApiClient.convertToType(data['avgExecutionPrice'], 'String');
      if (data.hasOwnProperty('orderPlacedBy'))
        obj.orderPlacedBy = ApiClient.convertToType(data['orderPlacedBy'], 'String');
      if (data.hasOwnProperty('tradingSymbol'))
        obj.tradingSymbol = ApiClient.convertToType(data['tradingSymbol'], 'String');
      if (data.hasOwnProperty('triggerPrice'))
        obj.triggerPrice = ApiClient.convertToType(data['triggerPrice'], 'String');
      if (data.hasOwnProperty('exchange'))
        obj.exchange = ApiClient.convertToType(data['exchange'], 'String');
      if (data.hasOwnProperty('totalQuantity'))
        obj.totalQuantity = ApiClient.convertToType(data['totalQuantity'], 'String');
      if (data.hasOwnProperty('expiry'))
        obj.expiry = ApiClient.convertToType(data['expiry'], 'String');
      if (data.hasOwnProperty('transactionType'))
        obj.transactionType = ApiClient.convertToType(data['transactionType'], 'String');
      if (data.hasOwnProperty('productType'))
        obj.productType = ApiClient.convertToType(data['productType'], 'String');
      if (data.hasOwnProperty('orderType'))
        obj.orderType = ApiClient.convertToType(data['orderType'], 'String');
      if (data.hasOwnProperty('quantity'))
        obj.quantity = ApiClient.convertToType(data['quantity'], 'String');
      if (data.hasOwnProperty('filledQuantity'))
        obj.filledQuantity = ApiClient.convertToType(data['filledQuantity'], 'String');
      if (data.hasOwnProperty('orderPrice'))
        obj.orderPrice = ApiClient.convertToType(data['orderPrice'], 'String');
      if (data.hasOwnProperty('filledPrice'))
        obj.filledPrice = ApiClient.convertToType(data['filledPrice'], 'String');
      if (data.hasOwnProperty('exchangeOrderNo'))
        obj.exchangeOrderNo = ApiClient.convertToType(data['exchangeOrderNo'], 'String');
      if (data.hasOwnProperty('orderValidity'))
        obj.orderValidity = ApiClient.convertToType(data['orderValidity'], 'String');
      if (data.hasOwnProperty('orderTime'))
        obj.orderTime = ApiClient.convertToType(data['orderTime'], 'String');
    }
    return obj;
  }

  /**
   * Quantity which is in waiting state to be filled in a specific trade
   * @member {String} pendingQuantity
   */
  exports.prototype.pendingQuantity = undefined;

  /**
   * Average price at which the quantities were bought/sold during the day
   * @member {String} avgExecutionPrice
   */
  exports.prototype.avgExecutionPrice = undefined;

  /**
   * Client code of the user who placed the order
   * @member {String} orderPlacedBy
   */
  exports.prototype.orderPlacedBy = undefined;

  /**
   * Trading Symbol of the scrip.
   * @member {String} tradingSymbol
   */
  exports.prototype.tradingSymbol = undefined;

  /**
   * The price at which an order should be triggered in case of SL, SL-M.
   * @member {String} triggerPrice
   */
  exports.prototype.triggerPrice = undefined;

  /**
   * Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
   * @member {String} exchange
   */
  exports.prototype.exchange = undefined;

  /**
   * Total Quantity 
   * @member {String} totalQuantity
   */
  exports.prototype.totalQuantity = undefined;

  /**
   * expiry date of trading symbol
   * @member {String} expiry
   */
  exports.prototype.expiry = undefined;

  /**
   * Type of the transaction, BUY / SELL.
   * @member {String} transactionType
   */
  exports.prototype.transactionType = undefined;

  /**
   * Product Type of order as placed by the user is CO (Cover Order)
   * @member {String} productType
   */
  exports.prototype.productType = undefined;

  /**
   * Type of order user has placed . It can be one of the following, MKT - Market Order,L- Limit Order,SL - Stop Loss Limit,SL-M - Stop loss market.
   * @member {String} orderType
   */
  exports.prototype.orderType = undefined;

  /**
   * Order Quantity as placed by the user
   * @member {String} quantity
   */
  exports.prototype.quantity = undefined;

  /**
   * Quantity which is filled in a specific trade. Can be less than or equal to the total quantity
   * @member {String} filledQuantity
   */
  exports.prototype.filledQuantity = undefined;

  /**
   * Limit price entered at the time of placing the order.
   * @member {String} orderPrice
   */
  exports.prototype.orderPrice = undefined;

  /**
   * Price at which exchange has filled the order
   * @member {String} filledPrice
   */
  exports.prototype.filledPrice = undefined;

  /**
   * Order identifier at the exchange.
   * @member {String} exchangeOrderNo
   */
  exports.prototype.exchangeOrderNo = undefined;

  /**
   * validity of the order
   * @member {String} orderValidity
   */
  exports.prototype.orderValidity = undefined;

  /**
   * Order placement time
   * @member {String} orderTime
   */
  exports.prototype.orderTime = undefined;

  return exports;

}));
