/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.OrderRequest = factory(root.StockNoteApiDocumentation.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The OrderRequest model module.
   * @module model/OrderRequest
   * @version 1.0
   */

  /**
   * Constructs a new <code>OrderRequest</code>.
   * Request object for placing an Order.
   * @alias module:model/OrderRequest
   * @class
   * @param symbolName {String} Trading Symbol Name of the scrip
   * @param exchange {String} Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
   * @param transactionType {String} Transaction type should be BUY or SELL
   * @param orderType {String} Type of order. It can be one of the following, MKT - Market Order,L- Limit Order,SL - Stop Loss Limit,SL-M - Stop loss market
   * @param quantity {String} Quantity with which order is being placed
   * @param disclosedQuantity {String} If provided should be minimum of 10% of actual quantity
   * @param price {String} Price at which the order will be placed
   * @param priceType {String} Price type required to place an order. Valid price type - LTP/ATP , default is LTP. Applicable for BO orders only.
   * @param marketProtection {String} Percentage of MarketProtection required for ordertype MKT/SL-M to limit loss due to market price changes against the price with which order is placed. Default value is 3%.
   * @param orderValidity {String} Order validity can be DAY / IOC .Day is an order type which is valid for the whole trading day and stays pending till it is executed in respective trading day. IOC(Immediate Or Cancel) order type is where once the user punches the order, the order hits the exchange and if not executed immediately, the order stands cancelled
   * @param afterMarketOrderFlag {String} After Market Order Flag YES/NO
   * @param productType {String} Product Type of the order. It can be CNC (Cash and Carry)NRML (Normal),MIS (Intraday)
   */
  var exports = function(symbolName, exchange, transactionType, orderType, quantity, disclosedQuantity, price, priceType, marketProtection, orderValidity, afterMarketOrderFlag, productType) {
    this.symbolName = symbolName;
    this.exchange = exchange;
    this.transactionType = transactionType;
    this.orderType = orderType;
    this.quantity = quantity;
    this.disclosedQuantity = disclosedQuantity;
    this.price = price;
    this.priceType = priceType;
    this.marketProtection = marketProtection;
    this.orderValidity = orderValidity;
    this.afterMarketOrderFlag = afterMarketOrderFlag;
    this.productType = productType;
  };

  /**
   * Constructs a <code>OrderRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OrderRequest} obj Optional instance to populate.
   * @return {module:model/OrderRequest} The populated <code>OrderRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('symbolName'))
        obj.symbolName = ApiClient.convertToType(data['symbolName'], 'String');
      if (data.hasOwnProperty('exchange'))
        obj.exchange = ApiClient.convertToType(data['exchange'], 'String');
      if (data.hasOwnProperty('transactionType'))
        obj.transactionType = ApiClient.convertToType(data['transactionType'], 'String');
      if (data.hasOwnProperty('orderType'))
        obj.orderType = ApiClient.convertToType(data['orderType'], 'String');
      if (data.hasOwnProperty('quantity'))
        obj.quantity = ApiClient.convertToType(data['quantity'], 'String');
      if (data.hasOwnProperty('disclosedQuantity'))
        obj.disclosedQuantity = ApiClient.convertToType(data['disclosedQuantity'], 'String');
      if (data.hasOwnProperty('price'))
        obj.price = ApiClient.convertToType(data['price'], 'String');
      if (data.hasOwnProperty('priceType'))
        obj.priceType = ApiClient.convertToType(data['priceType'], 'String');
      if (data.hasOwnProperty('marketProtection'))
        obj.marketProtection = ApiClient.convertToType(data['marketProtection'], 'String');
      if (data.hasOwnProperty('orderValidity'))
        obj.orderValidity = ApiClient.convertToType(data['orderValidity'], 'String');
      if (data.hasOwnProperty('afterMarketOrderFlag'))
        obj.afterMarketOrderFlag = ApiClient.convertToType(data['afterMarketOrderFlag'], 'String');
      if (data.hasOwnProperty('productType'))
        obj.productType = ApiClient.convertToType(data['productType'], 'String');
      if (data.hasOwnProperty('triggerPrice'))
        obj.triggerPrice = ApiClient.convertToType(data['triggerPrice'], 'String');
    }
    return obj;
  }

  /**
   * Trading Symbol Name of the scrip
   * @member {String} symbolName
   */
  exports.prototype.symbolName = undefined;

  /**
   * Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
   * @member {String} exchange
   */
  exports.prototype.exchange = undefined;

  /**
   * Transaction type should be BUY or SELL
   * @member {String} transactionType
   */
  exports.prototype.transactionType = undefined;

  /**
   * Type of order. It can be one of the following, MKT - Market Order,L- Limit Order,SL - Stop Loss Limit,SL-M - Stop loss market
   * @member {String} orderType
   */
  exports.prototype.orderType = undefined;

  /**
   * Quantity with which order is being placed
   * @member {String} quantity
   */
  exports.prototype.quantity = undefined;

  /**
   * If provided should be minimum of 10% of actual quantity
   * @member {String} disclosedQuantity
   */
  exports.prototype.disclosedQuantity = undefined;

  /**
   * Price at which the order will be placed
   * @member {String} price
   */
  exports.prototype.price = undefined;

  /**
   * Price type required to place an order. Valid price type - LTP/ATP , default is LTP. Applicable for BO orders only.
   * @member {String} priceType
   */
  exports.prototype.priceType = undefined;

  /**
   * Percentage of MarketProtection required for ordertype MKT/SL-M to limit loss due to market price changes against the price with which order is placed. Default value is 3%.
   * @member {String} marketProtection
   */
  exports.prototype.marketProtection = undefined;

  /**
   * Order validity can be DAY / IOC .Day is an order type which is valid for the whole trading day and stays pending till it is executed in respective trading day. IOC(Immediate Or Cancel) order type is where once the user punches the order, the order hits the exchange and if not executed immediately, the order stands cancelled
   * @member {String} orderValidity
   */
  exports.prototype.orderValidity = undefined;

  /**
   * After Market Order Flag YES/NO
   * @member {String} afterMarketOrderFlag
   */
  exports.prototype.afterMarketOrderFlag = undefined;

  /**
   * Product Type of the order. It can be CNC (Cash and Carry)NRML (Normal),MIS (Intraday)
   * @member {String} productType
   */
  exports.prototype.productType = undefined;

  /**
   * The price at which an order should be triggered in case of SL, SL-M
   * @member {String} triggerPrice
   */
  exports.prototype.triggerPrice = undefined;

  return exports;

}));
