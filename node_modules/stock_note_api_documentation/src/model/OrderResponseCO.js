/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OrderDetailsCO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./OrderDetailsCO'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.OrderResponseCO = factory(root.StockNoteApiDocumentation.ApiClient, root.StockNoteApiDocumentation.OrderDetailsCO);
  }
}(this, function(ApiClient, OrderDetailsCO) {
  'use strict';

  /**
   * The OrderResponseCO model module.
   * @module model/OrderResponseCO
   * @version 1.0
   */

  /**
   * Constructs a new <code>OrderResponseCO</code>.
   * @alias module:model/OrderResponseCO
   * @class
   * @param serverTime {String} Time at Server.
   * @param msgId {String} This is a unique identifier for every request into the system. Please quote this identifier to the support team if you face issues with the API request.
   * @param orderNumber {String} Unique Order identifier generated after placing an order which could be used for tracking order status 
   * @param status {String} Status of the order. It would be success or failure
   * @param exchangeOrderStatus {String} Status of the order execution at Exchange side, Most common values are PENDING, COMPLETE, REJECTED, CANCELLED, and OPEN
   * @param rejectionReason {String} If an order is rejected, cause of order rejection which comes as user friendly textual description 
   * @param statusMessage {String} Order placement status Message
   * @param orderDetails {module:model/OrderDetailsCO} Details of the order
   */
  var exports = function(serverTime, msgId, orderNumber, status, exchangeOrderStatus, rejectionReason, statusMessage, orderDetails) {
    this.serverTime = serverTime;
    this.msgId = msgId;
    this.orderNumber = orderNumber;
    this.status = status;
    this.exchangeOrderStatus = exchangeOrderStatus;
    this.rejectionReason = rejectionReason;
    this.statusMessage = statusMessage;
    this.orderDetails = orderDetails;
  };

  /**
   * Constructs a <code>OrderResponseCO</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OrderResponseCO} obj Optional instance to populate.
   * @return {module:model/OrderResponseCO} The populated <code>OrderResponseCO</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('serverTime'))
        obj.serverTime = ApiClient.convertToType(data['serverTime'], 'String');
      if (data.hasOwnProperty('msgId'))
        obj.msgId = ApiClient.convertToType(data['msgId'], 'String');
      if (data.hasOwnProperty('orderNumber'))
        obj.orderNumber = ApiClient.convertToType(data['orderNumber'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('exchangeOrderStatus'))
        obj.exchangeOrderStatus = ApiClient.convertToType(data['exchangeOrderStatus'], 'String');
      if (data.hasOwnProperty('rejectionReason'))
        obj.rejectionReason = ApiClient.convertToType(data['rejectionReason'], 'String');
      if (data.hasOwnProperty('statusMessage'))
        obj.statusMessage = ApiClient.convertToType(data['statusMessage'], 'String');
      if (data.hasOwnProperty('orderDetails'))
        obj.orderDetails = OrderDetailsCO.constructFromObject(data['orderDetails']);
    }
    return obj;
  }

  /**
   * Time at Server.
   * @member {String} serverTime
   */
  exports.prototype.serverTime = undefined;

  /**
   * This is a unique identifier for every request into the system. Please quote this identifier to the support team if you face issues with the API request.
   * @member {String} msgId
   */
  exports.prototype.msgId = undefined;

  /**
   * Unique Order identifier generated after placing an order which could be used for tracking order status 
   * @member {String} orderNumber
   */
  exports.prototype.orderNumber = undefined;

  /**
   * Status of the order. It would be success or failure
   * @member {String} status
   */
  exports.prototype.status = undefined;

  /**
   * Status of the order execution at Exchange side, Most common values are PENDING, COMPLETE, REJECTED, CANCELLED, and OPEN
   * @member {String} exchangeOrderStatus
   */
  exports.prototype.exchangeOrderStatus = undefined;

  /**
   * If an order is rejected, cause of order rejection which comes as user friendly textual description 
   * @member {String} rejectionReason
   */
  exports.prototype.rejectionReason = undefined;

  /**
   * Order placement status Message
   * @member {String} statusMessage
   */
  exports.prototype.statusMessage = undefined;

  /**
   * Details of the order
   * @member {module:model/OrderDetailsCO} orderDetails
   */
  exports.prototype.orderDetails = undefined;

  return exports;

}));
