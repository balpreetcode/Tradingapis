/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.Position = factory(root.StockNoteApiDocumentation.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Position model module.
   * @module model/Position
   * @version 1.0
   */

  /**
   * Constructs a new <code>Position</code>.
   * @alias module:model/Position
   * @class
   * @param averagePrice {String} Average trading price of the equity
   * @param exchange {String} Name of the exchange.Valid exchanges values (BSE/ NSE) If the user does not provide an exchange name, by default considered as NSE.
   * @param markToMarketPrice {String} Price change between previous close price and current price
   * @param lastTradedPrice {String} Price at which last transaction/trade is done
   * @param previousClose {String} Previous close refers to the prior day's final price of security when the market officially closes for the day.
   * @param productCode {String} Type of the product, allowable type is CNC
   * @param symbolDescription {String} Scrip Description 
   * @param tradingSymbol {String} Symbol name of the scrip.
   * @param calculatedNetQuantity {String} Quantity left after the day
   * @param averageBuyPrice {String} Average price at which the quantities were bought
   * @param averageSellPrice {String} Average price at which the quantities were sold
   * @param boardLotQuantity {String} The standardized number of shares decided by the exchange as a trading unit
   * @param boughtPrice {String} Price at which quantities were bought during the day
   * @param buyQuantity {String} Total quantity brought and added to the position during the day
   * @param carryForwardQuantity {String} Quantity bought or sold in previous session
   * @param carryForwardValue {String} Net value of the position in previous session
   * @param multiplier {String} The lot size multiplier used to calculate Profit and Loss
   * @param netPositionValue {String} Net value of the position during the day
   * @param netQuantity {String} Limit quantity of the position
   * @param netValue {String} Net value of the bought quantities
   * @param positionType {String} Type of the position, Ex -Day/Net
   * @param positionConversions {Array.<String>} Different Product types the user can Convert an existing position to
   * @param soldValue {String} Total value of sold quantities
   * @param realizedGainAndLoss {String} The Profit and Loss returns from a closed position
   * @param unrealizedGainAndLoss {String} The Profit and Loss returns from a open position
   * @param companyName {String} Full name of the trading company
   * @param expiryDate {String} Expiry date of the scrip
   * @param optionType {String} Option Type (PE/CE). 
   */
  var exports = function(averagePrice, exchange, markToMarketPrice, lastTradedPrice, previousClose, productCode, symbolDescription, tradingSymbol, calculatedNetQuantity, averageBuyPrice, averageSellPrice, boardLotQuantity, boughtPrice, buyQuantity, carryForwardQuantity, carryForwardValue, multiplier, netPositionValue, netQuantity, netValue, positionType, positionConversions, soldValue, realizedGainAndLoss, unrealizedGainAndLoss, companyName, expiryDate, optionType) {
    this.averagePrice = averagePrice;
    this.exchange = exchange;
    this.markToMarketPrice = markToMarketPrice;
    this.lastTradedPrice = lastTradedPrice;
    this.previousClose = previousClose;
    this.productCode = productCode;
    this.symbolDescription = symbolDescription;
    this.tradingSymbol = tradingSymbol;
    this.calculatedNetQuantity = calculatedNetQuantity;
    this.averageBuyPrice = averageBuyPrice;
    this.averageSellPrice = averageSellPrice;
    this.boardLotQuantity = boardLotQuantity;
    this.boughtPrice = boughtPrice;
    this.buyQuantity = buyQuantity;
    this.carryForwardQuantity = carryForwardQuantity;
    this.carryForwardValue = carryForwardValue;
    this.multiplier = multiplier;
    this.netPositionValue = netPositionValue;
    this.netQuantity = netQuantity;
    this.netValue = netValue;
    this.positionType = positionType;
    this.positionConversions = positionConversions;
    this.soldValue = soldValue;
    this.realizedGainAndLoss = realizedGainAndLoss;
    this.unrealizedGainAndLoss = unrealizedGainAndLoss;
    this.companyName = companyName;
    this.expiryDate = expiryDate;
    this.optionType = optionType;
  };

  /**
   * Constructs a <code>Position</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Position} obj Optional instance to populate.
   * @return {module:model/Position} The populated <code>Position</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('averagePrice'))
        obj.averagePrice = ApiClient.convertToType(data['averagePrice'], 'String');
      if (data.hasOwnProperty('exchange'))
        obj.exchange = ApiClient.convertToType(data['exchange'], 'String');
      if (data.hasOwnProperty('markToMarketPrice'))
        obj.markToMarketPrice = ApiClient.convertToType(data['markToMarketPrice'], 'String');
      if (data.hasOwnProperty('lastTradedPrice'))
        obj.lastTradedPrice = ApiClient.convertToType(data['lastTradedPrice'], 'String');
      if (data.hasOwnProperty('previousClose'))
        obj.previousClose = ApiClient.convertToType(data['previousClose'], 'String');
      if (data.hasOwnProperty('productCode'))
        obj.productCode = ApiClient.convertToType(data['productCode'], 'String');
      if (data.hasOwnProperty('symbolDescription'))
        obj.symbolDescription = ApiClient.convertToType(data['symbolDescription'], 'String');
      if (data.hasOwnProperty('tradingSymbol'))
        obj.tradingSymbol = ApiClient.convertToType(data['tradingSymbol'], 'String');
      if (data.hasOwnProperty('calculatedNetQuantity'))
        obj.calculatedNetQuantity = ApiClient.convertToType(data['calculatedNetQuantity'], 'String');
      if (data.hasOwnProperty('averageBuyPrice'))
        obj.averageBuyPrice = ApiClient.convertToType(data['averageBuyPrice'], 'String');
      if (data.hasOwnProperty('averageSellPrice'))
        obj.averageSellPrice = ApiClient.convertToType(data['averageSellPrice'], 'String');
      if (data.hasOwnProperty('boardLotQuantity'))
        obj.boardLotQuantity = ApiClient.convertToType(data['boardLotQuantity'], 'String');
      if (data.hasOwnProperty('boughtPrice'))
        obj.boughtPrice = ApiClient.convertToType(data['boughtPrice'], 'String');
      if (data.hasOwnProperty('buyQuantity'))
        obj.buyQuantity = ApiClient.convertToType(data['buyQuantity'], 'String');
      if (data.hasOwnProperty('carryForwardQuantity'))
        obj.carryForwardQuantity = ApiClient.convertToType(data['carryForwardQuantity'], 'String');
      if (data.hasOwnProperty('carryForwardValue'))
        obj.carryForwardValue = ApiClient.convertToType(data['carryForwardValue'], 'String');
      if (data.hasOwnProperty('multiplier'))
        obj.multiplier = ApiClient.convertToType(data['multiplier'], 'String');
      if (data.hasOwnProperty('netPositionValue'))
        obj.netPositionValue = ApiClient.convertToType(data['netPositionValue'], 'String');
      if (data.hasOwnProperty('netQuantity'))
        obj.netQuantity = ApiClient.convertToType(data['netQuantity'], 'String');
      if (data.hasOwnProperty('netValue'))
        obj.netValue = ApiClient.convertToType(data['netValue'], 'String');
      if (data.hasOwnProperty('positionType'))
        obj.positionType = ApiClient.convertToType(data['positionType'], 'String');
      if (data.hasOwnProperty('positionConversions'))
        obj.positionConversions = ApiClient.convertToType(data['positionConversions'], ['String']);
      if (data.hasOwnProperty('soldValue'))
        obj.soldValue = ApiClient.convertToType(data['soldValue'], 'String');
      if (data.hasOwnProperty('transactionType'))
        obj.transactionType = ApiClient.convertToType(data['transactionType'], 'String');
      if (data.hasOwnProperty('realizedGainAndLoss'))
        obj.realizedGainAndLoss = ApiClient.convertToType(data['realizedGainAndLoss'], 'String');
      if (data.hasOwnProperty('unrealizedGainAndLoss'))
        obj.unrealizedGainAndLoss = ApiClient.convertToType(data['unrealizedGainAndLoss'], 'String');
      if (data.hasOwnProperty('companyName'))
        obj.companyName = ApiClient.convertToType(data['companyName'], 'String');
      if (data.hasOwnProperty('expiryDate'))
        obj.expiryDate = ApiClient.convertToType(data['expiryDate'], 'String');
      if (data.hasOwnProperty('optionType'))
        obj.optionType = ApiClient.convertToType(data['optionType'], 'String');
    }
    return obj;
  }

  /**
   * Average trading price of the equity
   * @member {String} averagePrice
   */
  exports.prototype.averagePrice = undefined;

  /**
   * Name of the exchange.Valid exchanges values (BSE/ NSE) If the user does not provide an exchange name, by default considered as NSE.
   * @member {String} exchange
   */
  exports.prototype.exchange = undefined;

  /**
   * Price change between previous close price and current price
   * @member {String} markToMarketPrice
   */
  exports.prototype.markToMarketPrice = undefined;

  /**
   * Price at which last transaction/trade is done
   * @member {String} lastTradedPrice
   */
  exports.prototype.lastTradedPrice = undefined;

  /**
   * Previous close refers to the prior day's final price of security when the market officially closes for the day.
   * @member {String} previousClose
   */
  exports.prototype.previousClose = undefined;

  /**
   * Type of the product, allowable type is CNC
   * @member {String} productCode
   */
  exports.prototype.productCode = undefined;

  /**
   * Scrip Description 
   * @member {String} symbolDescription
   */
  exports.prototype.symbolDescription = undefined;

  /**
   * Symbol name of the scrip.
   * @member {String} tradingSymbol
   */
  exports.prototype.tradingSymbol = undefined;

  /**
   * Quantity left after the day
   * @member {String} calculatedNetQuantity
   */
  exports.prototype.calculatedNetQuantity = undefined;

  /**
   * Average price at which the quantities were bought
   * @member {String} averageBuyPrice
   */
  exports.prototype.averageBuyPrice = undefined;

  /**
   * Average price at which the quantities were sold
   * @member {String} averageSellPrice
   */
  exports.prototype.averageSellPrice = undefined;

  /**
   * The standardized number of shares decided by the exchange as a trading unit
   * @member {String} boardLotQuantity
   */
  exports.prototype.boardLotQuantity = undefined;

  /**
   * Price at which quantities were bought during the day
   * @member {String} boughtPrice
   */
  exports.prototype.boughtPrice = undefined;

  /**
   * Total quantity brought and added to the position during the day
   * @member {String} buyQuantity
   */
  exports.prototype.buyQuantity = undefined;

  /**
   * Quantity bought or sold in previous session
   * @member {String} carryForwardQuantity
   */
  exports.prototype.carryForwardQuantity = undefined;

  /**
   * Net value of the position in previous session
   * @member {String} carryForwardValue
   */
  exports.prototype.carryForwardValue = undefined;

  /**
   * The lot size multiplier used to calculate Profit and Loss
   * @member {String} multiplier
   */
  exports.prototype.multiplier = undefined;

  /**
   * Net value of the position during the day
   * @member {String} netPositionValue
   */
  exports.prototype.netPositionValue = undefined;

  /**
   * Limit quantity of the position
   * @member {String} netQuantity
   */
  exports.prototype.netQuantity = undefined;

  /**
   * Net value of the bought quantities
   * @member {String} netValue
   */
  exports.prototype.netValue = undefined;

  /**
   * Type of the position, Ex -Day/Net
   * @member {String} positionType
   */
  exports.prototype.positionType = undefined;

  /**
   * Different Product types the user can Convert an existing position to
   * @member {Array.<String>} positionConversions
   */
  exports.prototype.positionConversions = undefined;

  /**
   * Total value of sold quantities
   * @member {String} soldValue
   */
  exports.prototype.soldValue = undefined;

  /**
   * Type of the transaction, BUY / SELL.
   * @member {String} transactionType
   */
  exports.prototype.transactionType = undefined;

  /**
   * The Profit and Loss returns from a closed position
   * @member {String} realizedGainAndLoss
   */
  exports.prototype.realizedGainAndLoss = undefined;

  /**
   * The Profit and Loss returns from a open position
   * @member {String} unrealizedGainAndLoss
   */
  exports.prototype.unrealizedGainAndLoss = undefined;

  /**
   * Full name of the trading company
   * @member {String} companyName
   */
  exports.prototype.companyName = undefined;

  /**
   * Expiry date of the scrip
   * @member {String} expiryDate
   */
  exports.prototype.expiryDate = undefined;

  /**
   * Option Type (PE/CE). 
   * @member {String} optionType
   */
  exports.prototype.optionType = undefined;

  return exports;

}));
