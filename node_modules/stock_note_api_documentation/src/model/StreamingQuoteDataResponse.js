/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.StreamingQuoteDataResponse = factory(root.StockNoteApiDocumentation.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The StreamingQuoteDataResponse model module.
   * @module model/StreamingQuoteDataResponse
   * @version 1.0
   */

  /**
   * Constructs a new <code>StreamingQuoteDataResponse</code>.
   * @alias module:model/StreamingQuoteDataResponse
   * @class
   * @param aPr {String} Ask Price that seller willing to take for the scrip
   * @param bPr {String} Bid Price that buyer willing to pay for the scrip
   * @param aSz {String} Ask size/quantity for trading
   * @param bSz {String} Bid size/quantity for trading
   * @param sym {String} Actual symbol name of the scrip
   * @param avgPr {String} Average trading price of the equity or derivative
   * @param c {String} Close value of market snapshot
   * @param h {String} High value of market snapshot
   * @param l {String} Low value of market snapshot
   * @param o {String} Opening price of a market snapshot
   * @param oI {String} Open interest is the total number of outstanding derivative contracts that have not been settled
   * @param oIChg {String} open interest changed value
   * @param ch {String} Change value is the difference between the current value and the previous day's market close
   * @param chPer {String} Percentage of change between the current value and the previous day's market close
   * @param lTrdT {String} Time of the last transaction
   * @param ltp {String} Price at which last transaction / trade is done
   * @param ltq {String} Quantity of last transaction
   * @param ltt {String} Last transaction time in milliseconds
   * @param lttUTC {String} Last transaction time in UTC time zone format
   * @param tBQ {String} Total quantity of BUY transaction
   * @param tSQ {String} Total quantity of SELL transaction
   * @param ttv {String} Total volume of trading done
   * @param vol {String} Total amount of a security traded Today
   * @param yH {String} 52 week high
   * @param yL {String} 52 week low
   * @param streamingType {String} Streaming type. Added for future use.Pass this value as “quote” always
   */
  var exports = function(aPr, bPr, aSz, bSz, sym, avgPr, c, h, l, o, oI, oIChg, ch, chPer, lTrdT, ltp, ltq, ltt, lttUTC, tBQ, tSQ, ttv, vol, yH, yL, streamingType) {
    this.aPr = aPr;
    this.bPr = bPr;
    this.aSz = aSz;
    this.bSz = bSz;
    this.sym = sym;
    this.avgPr = avgPr;
    this.c = c;
    this.h = h;
    this.l = l;
    this.o = o;
    this.oI = oI;
    this.oIChg = oIChg;
    this.ch = ch;
    this.chPer = chPer;
    this.lTrdT = lTrdT;
    this.ltp = ltp;
    this.ltq = ltq;
    this.ltt = ltt;
    this.lttUTC = lttUTC;
    this.tBQ = tBQ;
    this.tSQ = tSQ;
    this.ttv = ttv;
    this.vol = vol;
    this.yH = yH;
    this.yL = yL;
    this.streamingType = streamingType;
  };

  /**
   * Constructs a <code>StreamingQuoteDataResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/StreamingQuoteDataResponse} obj Optional instance to populate.
   * @return {module:model/StreamingQuoteDataResponse} The populated <code>StreamingQuoteDataResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('aPr'))
        obj.aPr = ApiClient.convertToType(data['aPr'], 'String');
      if (data.hasOwnProperty('bPr'))
        obj.bPr = ApiClient.convertToType(data['bPr'], 'String');
      if (data.hasOwnProperty('aSz'))
        obj.aSz = ApiClient.convertToType(data['aSz'], 'String');
      if (data.hasOwnProperty('bSz'))
        obj.bSz = ApiClient.convertToType(data['bSz'], 'String');
      if (data.hasOwnProperty('sym'))
        obj.sym = ApiClient.convertToType(data['sym'], 'String');
      if (data.hasOwnProperty('avgPr'))
        obj.avgPr = ApiClient.convertToType(data['avgPr'], 'String');
      if (data.hasOwnProperty('c'))
        obj.c = ApiClient.convertToType(data['c'], 'String');
      if (data.hasOwnProperty('h'))
        obj.h = ApiClient.convertToType(data['h'], 'String');
      if (data.hasOwnProperty('l'))
        obj.l = ApiClient.convertToType(data['l'], 'String');
      if (data.hasOwnProperty('o'))
        obj.o = ApiClient.convertToType(data['o'], 'String');
      if (data.hasOwnProperty('oI'))
        obj.oI = ApiClient.convertToType(data['oI'], 'String');
      if (data.hasOwnProperty('oIChg'))
        obj.oIChg = ApiClient.convertToType(data['oIChg'], 'String');
      if (data.hasOwnProperty('ch'))
        obj.ch = ApiClient.convertToType(data['ch'], 'String');
      if (data.hasOwnProperty('chPer'))
        obj.chPer = ApiClient.convertToType(data['chPer'], 'String');
      if (data.hasOwnProperty('lTrdT'))
        obj.lTrdT = ApiClient.convertToType(data['lTrdT'], 'String');
      if (data.hasOwnProperty('ltp'))
        obj.ltp = ApiClient.convertToType(data['ltp'], 'String');
      if (data.hasOwnProperty('ltq'))
        obj.ltq = ApiClient.convertToType(data['ltq'], 'String');
      if (data.hasOwnProperty('ltt'))
        obj.ltt = ApiClient.convertToType(data['ltt'], 'String');
      if (data.hasOwnProperty('lttUTC'))
        obj.lttUTC = ApiClient.convertToType(data['lttUTC'], 'String');
      if (data.hasOwnProperty('tBQ'))
        obj.tBQ = ApiClient.convertToType(data['tBQ'], 'String');
      if (data.hasOwnProperty('tSQ'))
        obj.tSQ = ApiClient.convertToType(data['tSQ'], 'String');
      if (data.hasOwnProperty('ttv'))
        obj.ttv = ApiClient.convertToType(data['ttv'], 'String');
      if (data.hasOwnProperty('vol'))
        obj.vol = ApiClient.convertToType(data['vol'], 'String');
      if (data.hasOwnProperty('yH'))
        obj.yH = ApiClient.convertToType(data['yH'], 'String');
      if (data.hasOwnProperty('yL'))
        obj.yL = ApiClient.convertToType(data['yL'], 'String');
      if (data.hasOwnProperty('streaming_type'))
        obj.streamingType = ApiClient.convertToType(data['streaming_type'], 'String');
    }
    return obj;
  }

  /**
   * Ask Price that seller willing to take for the scrip
   * @member {String} aPr
   */
  exports.prototype.aPr = undefined;

  /**
   * Bid Price that buyer willing to pay for the scrip
   * @member {String} bPr
   */
  exports.prototype.bPr = undefined;

  /**
   * Ask size/quantity for trading
   * @member {String} aSz
   */
  exports.prototype.aSz = undefined;

  /**
   * Bid size/quantity for trading
   * @member {String} bSz
   */
  exports.prototype.bSz = undefined;

  /**
   * Actual symbol name of the scrip
   * @member {String} sym
   */
  exports.prototype.sym = undefined;

  /**
   * Average trading price of the equity or derivative
   * @member {String} avgPr
   */
  exports.prototype.avgPr = undefined;

  /**
   * Close value of market snapshot
   * @member {String} c
   */
  exports.prototype.c = undefined;

  /**
   * High value of market snapshot
   * @member {String} h
   */
  exports.prototype.h = undefined;

  /**
   * Low value of market snapshot
   * @member {String} l
   */
  exports.prototype.l = undefined;

  /**
   * Opening price of a market snapshot
   * @member {String} o
   */
  exports.prototype.o = undefined;

  /**
   * Open interest is the total number of outstanding derivative contracts that have not been settled
   * @member {String} oI
   */
  exports.prototype.oI = undefined;

  /**
   * open interest changed value
   * @member {String} oIChg
   */
  exports.prototype.oIChg = undefined;

  /**
   * Change value is the difference between the current value and the previous day's market close
   * @member {String} ch
   */
  exports.prototype.ch = undefined;

  /**
   * Percentage of change between the current value and the previous day's market close
   * @member {String} chPer
   */
  exports.prototype.chPer = undefined;

  /**
   * Time of the last transaction
   * @member {String} lTrdT
   */
  exports.prototype.lTrdT = undefined;

  /**
   * Price at which last transaction / trade is done
   * @member {String} ltp
   */
  exports.prototype.ltp = undefined;

  /**
   * Quantity of last transaction
   * @member {String} ltq
   */
  exports.prototype.ltq = undefined;

  /**
   * Last transaction time in milliseconds
   * @member {String} ltt
   */
  exports.prototype.ltt = undefined;

  /**
   * Last transaction time in UTC time zone format
   * @member {String} lttUTC
   */
  exports.prototype.lttUTC = undefined;

  /**
   * Total quantity of BUY transaction
   * @member {String} tBQ
   */
  exports.prototype.tBQ = undefined;

  /**
   * Total quantity of SELL transaction
   * @member {String} tSQ
   */
  exports.prototype.tSQ = undefined;

  /**
   * Total volume of trading done
   * @member {String} ttv
   */
  exports.prototype.ttv = undefined;

  /**
   * Total amount of a security traded Today
   * @member {String} vol
   */
  exports.prototype.vol = undefined;

  /**
   * 52 week high
   * @member {String} yH
   */
  exports.prototype.yH = undefined;

  /**
   * 52 week low
   * @member {String} yL
   */
  exports.prototype.yL = undefined;

  /**
   * Streaming type. Added for future use.Pass this value as “quote” always
   * @member {String} streamingType
   */
  exports.prototype.streamingType = undefined;

  return exports;

}));
