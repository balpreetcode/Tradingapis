/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.TradeBookEntry = factory(root.StockNoteApiDocumentation.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The TradeBookEntry model module.
   * @module model/TradeBookEntry
   * @version 1.0
   */

  /**
   * Constructs a new <code>TradeBookEntry</code>.
   * @alias module:model/TradeBookEntry
   * @class
   * @param orderNumber {String} Unique Order identifier generated after placing an order
   * @param exchange {String} Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
   * @param tradingSymbol {String} Trading Symbol of the scrip.
   * @param symbolDescription {String} Scrip description
   * @param transactionType {String} Type of the transaction, BUY / SELL.
   * @param productCode {String} Product Type of order as placed by the user. It can be CNC (Cash and Carry),BO (Bracket Order),CO (Cover Order),NRML (Normal),MIS (Intraday).
   * @param orderType {String} Type of order user has placed . It can be one of the following, MKT - Market Order,L- Limit Order,SL - Stop Loss Limit,SL-M - Stop loss market.
   * @param orderPrice {String} Limit price of a particular order
   * @param quantity {String} It is the order quantity
   * @param disclosedQuantity {String} Quantity to disclose to public in the market
   * @param triggerPrice {String} The price at which an order should be triggered in case of SL, SL-M.
   * @param marketProtection {String} Percentage of MarketProtection required for ordertype MKT/SL-M to limit loss due to market price changes against the price with which order is placed. Default value is 3%.
   * @param orderValidity {String} Order validity can be DAY / IOC
   * @param orderStatus {String} Status of the order at Exchange side, either executed successfully or pending or rejected
   * @param orderValue {String} Value of the order
   * @param instrumentName {String} Name of the instrument
   * @param orderTime {String} Order placement time 
   * @param userId {String} The client Code provided to you by SAMCO after opening an account.
   * @param filledQuantity {String} Quantity which is filled in a specific trade. Can be less than or equal to the total quantity
   * @param unfilledQuantity {String} Quantity which is not filled in a partially filled order. Can be less than or equal to the total quantity
   * @param exchangeConfirmationTime {String} Order confirmation time at exchange
   * @param coverOrderPercentage {String} Percentage of cover order
   * @param exchangeOrderNumber {String} Unique Order identifier generated after placing an order.
   * @param tradeNumber {String} Unique trade identifier generated for every trade.
   * @param tradePrice {String} Price of a trade.
   * @param tradeDate {String} Date of a trade.
   * @param tradeTime {String} Time of a trade.
   * @param strikePrice {String} The strike price is the predetermined price at which a put buyer can sell the underlying asset.
   * @param optionType {String} Option Type (PE/CE). 
   * @param lastTradePrice {String}  Price at which last transaction/trade is done
   * @param expiry {String} Shows expiry date of a trading symbol.
   */
  var exports = function(orderNumber, exchange, tradingSymbol, symbolDescription, transactionType, productCode, orderType, orderPrice, quantity, disclosedQuantity, triggerPrice, marketProtection, orderValidity, orderStatus, orderValue, instrumentName, orderTime, userId, filledQuantity, unfilledQuantity, exchangeConfirmationTime, coverOrderPercentage, exchangeOrderNumber, tradeNumber, tradePrice, tradeDate, tradeTime, strikePrice, optionType, lastTradePrice, expiry) {
    this.orderNumber = orderNumber;
    this.exchange = exchange;
    this.tradingSymbol = tradingSymbol;
    this.symbolDescription = symbolDescription;
    this.transactionType = transactionType;
    this.productCode = productCode;
    this.orderType = orderType;
    this.orderPrice = orderPrice;
    this.quantity = quantity;
    this.disclosedQuantity = disclosedQuantity;
    this.triggerPrice = triggerPrice;
    this.marketProtection = marketProtection;
    this.orderValidity = orderValidity;
    this.orderStatus = orderStatus;
    this.orderValue = orderValue;
    this.instrumentName = instrumentName;
    this.orderTime = orderTime;
    this.userId = userId;
    this.filledQuantity = filledQuantity;
    this.unfilledQuantity = unfilledQuantity;
    this.exchangeConfirmationTime = exchangeConfirmationTime;
    this.coverOrderPercentage = coverOrderPercentage;
    this.exchangeOrderNumber = exchangeOrderNumber;
    this.tradeNumber = tradeNumber;
    this.tradePrice = tradePrice;
    this.tradeDate = tradeDate;
    this.tradeTime = tradeTime;
    this.strikePrice = strikePrice;
    this.optionType = optionType;
    this.lastTradePrice = lastTradePrice;
    this.expiry = expiry;
  };

  /**
   * Constructs a <code>TradeBookEntry</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TradeBookEntry} obj Optional instance to populate.
   * @return {module:model/TradeBookEntry} The populated <code>TradeBookEntry</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('orderNumber'))
        obj.orderNumber = ApiClient.convertToType(data['orderNumber'], 'String');
      if (data.hasOwnProperty('exchange'))
        obj.exchange = ApiClient.convertToType(data['exchange'], 'String');
      if (data.hasOwnProperty('tradingSymbol'))
        obj.tradingSymbol = ApiClient.convertToType(data['tradingSymbol'], 'String');
      if (data.hasOwnProperty('symbolDescription'))
        obj.symbolDescription = ApiClient.convertToType(data['symbolDescription'], 'String');
      if (data.hasOwnProperty('transactionType'))
        obj.transactionType = ApiClient.convertToType(data['transactionType'], 'String');
      if (data.hasOwnProperty('productCode'))
        obj.productCode = ApiClient.convertToType(data['productCode'], 'String');
      if (data.hasOwnProperty('orderType'))
        obj.orderType = ApiClient.convertToType(data['orderType'], 'String');
      if (data.hasOwnProperty('orderPrice'))
        obj.orderPrice = ApiClient.convertToType(data['orderPrice'], 'String');
      if (data.hasOwnProperty('quantity'))
        obj.quantity = ApiClient.convertToType(data['quantity'], 'String');
      if (data.hasOwnProperty('disclosedQuantity'))
        obj.disclosedQuantity = ApiClient.convertToType(data['disclosedQuantity'], 'String');
      if (data.hasOwnProperty('triggerPrice'))
        obj.triggerPrice = ApiClient.convertToType(data['triggerPrice'], 'String');
      if (data.hasOwnProperty('marketProtection'))
        obj.marketProtection = ApiClient.convertToType(data['marketProtection'], 'String');
      if (data.hasOwnProperty('orderValidity'))
        obj.orderValidity = ApiClient.convertToType(data['orderValidity'], 'String');
      if (data.hasOwnProperty('orderStatus'))
        obj.orderStatus = ApiClient.convertToType(data['orderStatus'], 'String');
      if (data.hasOwnProperty('orderValue'))
        obj.orderValue = ApiClient.convertToType(data['orderValue'], 'String');
      if (data.hasOwnProperty('instrumentName'))
        obj.instrumentName = ApiClient.convertToType(data['instrumentName'], 'String');
      if (data.hasOwnProperty('orderTime'))
        obj.orderTime = ApiClient.convertToType(data['orderTime'], 'String');
      if (data.hasOwnProperty('userId'))
        obj.userId = ApiClient.convertToType(data['userId'], 'String');
      if (data.hasOwnProperty('filledQuantity'))
        obj.filledQuantity = ApiClient.convertToType(data['filledQuantity'], 'String');
      if (data.hasOwnProperty('unfilledQuantity'))
        obj.unfilledQuantity = ApiClient.convertToType(data['unfilledQuantity'], 'String');
      if (data.hasOwnProperty('exchangeConfirmationTime'))
        obj.exchangeConfirmationTime = ApiClient.convertToType(data['exchangeConfirmationTime'], 'String');
      if (data.hasOwnProperty('coverOrderPercentage'))
        obj.coverOrderPercentage = ApiClient.convertToType(data['coverOrderPercentage'], 'String');
      if (data.hasOwnProperty('exchangeOrderNumber'))
        obj.exchangeOrderNumber = ApiClient.convertToType(data['exchangeOrderNumber'], 'String');
      if (data.hasOwnProperty('tradeNumber'))
        obj.tradeNumber = ApiClient.convertToType(data['tradeNumber'], 'String');
      if (data.hasOwnProperty('tradePrice'))
        obj.tradePrice = ApiClient.convertToType(data['tradePrice'], 'String');
      if (data.hasOwnProperty('tradeDate'))
        obj.tradeDate = ApiClient.convertToType(data['tradeDate'], 'String');
      if (data.hasOwnProperty('tradeTime'))
        obj.tradeTime = ApiClient.convertToType(data['tradeTime'], 'String');
      if (data.hasOwnProperty('strikePrice'))
        obj.strikePrice = ApiClient.convertToType(data['strikePrice'], 'String');
      if (data.hasOwnProperty('optionType'))
        obj.optionType = ApiClient.convertToType(data['optionType'], 'String');
      if (data.hasOwnProperty('lastTradePrice'))
        obj.lastTradePrice = ApiClient.convertToType(data['lastTradePrice'], 'String');
      if (data.hasOwnProperty('expiry'))
        obj.expiry = ApiClient.convertToType(data['expiry'], 'String');
    }
    return obj;
  }

  /**
   * Unique Order identifier generated after placing an order
   * @member {String} orderNumber
   */
  exports.prototype.orderNumber = undefined;

  /**
   * Name of the exchange.Valid exchanges values (BSE/ NSE/ NFO/ MCX/ CDS).If the user does not provide an exchange name, by default considered as NSE.For trading with BSE, NFO, CDS and MCX, exchange is mandatory.
   * @member {String} exchange
   */
  exports.prototype.exchange = undefined;

  /**
   * Trading Symbol of the scrip.
   * @member {String} tradingSymbol
   */
  exports.prototype.tradingSymbol = undefined;

  /**
   * Scrip description
   * @member {String} symbolDescription
   */
  exports.prototype.symbolDescription = undefined;

  /**
   * Type of the transaction, BUY / SELL.
   * @member {String} transactionType
   */
  exports.prototype.transactionType = undefined;

  /**
   * Product Type of order as placed by the user. It can be CNC (Cash and Carry),BO (Bracket Order),CO (Cover Order),NRML (Normal),MIS (Intraday).
   * @member {String} productCode
   */
  exports.prototype.productCode = undefined;

  /**
   * Type of order user has placed . It can be one of the following, MKT - Market Order,L- Limit Order,SL - Stop Loss Limit,SL-M - Stop loss market.
   * @member {String} orderType
   */
  exports.prototype.orderType = undefined;

  /**
   * Limit price of a particular order
   * @member {String} orderPrice
   */
  exports.prototype.orderPrice = undefined;

  /**
   * It is the order quantity
   * @member {String} quantity
   */
  exports.prototype.quantity = undefined;

  /**
   * Quantity to disclose to public in the market
   * @member {String} disclosedQuantity
   */
  exports.prototype.disclosedQuantity = undefined;

  /**
   * The price at which an order should be triggered in case of SL, SL-M.
   * @member {String} triggerPrice
   */
  exports.prototype.triggerPrice = undefined;

  /**
   * Percentage of MarketProtection required for ordertype MKT/SL-M to limit loss due to market price changes against the price with which order is placed. Default value is 3%.
   * @member {String} marketProtection
   */
  exports.prototype.marketProtection = undefined;

  /**
   * Order validity can be DAY / IOC
   * @member {String} orderValidity
   */
  exports.prototype.orderValidity = undefined;

  /**
   * Status of the order at Exchange side, either executed successfully or pending or rejected
   * @member {String} orderStatus
   */
  exports.prototype.orderStatus = undefined;

  /**
   * Value of the order
   * @member {String} orderValue
   */
  exports.prototype.orderValue = undefined;

  /**
   * Name of the instrument
   * @member {String} instrumentName
   */
  exports.prototype.instrumentName = undefined;

  /**
   * Order placement time 
   * @member {String} orderTime
   */
  exports.prototype.orderTime = undefined;

  /**
   * The client Code provided to you by SAMCO after opening an account.
   * @member {String} userId
   */
  exports.prototype.userId = undefined;

  /**
   * Quantity which is filled in a specific trade. Can be less than or equal to the total quantity
   * @member {String} filledQuantity
   */
  exports.prototype.filledQuantity = undefined;

  /**
   * Quantity which is not filled in a partially filled order. Can be less than or equal to the total quantity
   * @member {String} unfilledQuantity
   */
  exports.prototype.unfilledQuantity = undefined;

  /**
   * Order confirmation time at exchange
   * @member {String} exchangeConfirmationTime
   */
  exports.prototype.exchangeConfirmationTime = undefined;

  /**
   * Percentage of cover order
   * @member {String} coverOrderPercentage
   */
  exports.prototype.coverOrderPercentage = undefined;

  /**
   * Unique Order identifier generated after placing an order.
   * @member {String} exchangeOrderNumber
   */
  exports.prototype.exchangeOrderNumber = undefined;

  /**
   * Unique trade identifier generated for every trade.
   * @member {String} tradeNumber
   */
  exports.prototype.tradeNumber = undefined;

  /**
   * Price of a trade.
   * @member {String} tradePrice
   */
  exports.prototype.tradePrice = undefined;

  /**
   * Date of a trade.
   * @member {String} tradeDate
   */
  exports.prototype.tradeDate = undefined;

  /**
   * Time of a trade.
   * @member {String} tradeTime
   */
  exports.prototype.tradeTime = undefined;

  /**
   * The strike price is the predetermined price at which a put buyer can sell the underlying asset.
   * @member {String} strikePrice
   */
  exports.prototype.strikePrice = undefined;

  /**
   * Option Type (PE/CE). 
   * @member {String} optionType
   */
  exports.prototype.optionType = undefined;

  /**
   *  Price at which last transaction/trade is done
   * @member {String} lastTradePrice
   */
  exports.prototype.lastTradePrice = undefined;

  /**
   * Shows expiry date of a trading symbol.
   * @member {String} expiry
   */
  exports.prototype.expiry = undefined;

  return exports;

}));
