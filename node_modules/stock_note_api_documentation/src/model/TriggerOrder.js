/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.StockNoteApiDocumentation) {
      root.StockNoteApiDocumentation = {};
    }
    root.StockNoteApiDocumentation.TriggerOrder = factory(root.StockNoteApiDocumentation.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The TriggerOrder model module.
   * @module model/TriggerOrder
   * @version 1.0
   */

  /**
   * Constructs a new <code>TriggerOrder</code>.
   * @alias module:model/TriggerOrder
   * @class
   * @param stopLossOrderNo {String} Unique Order identifier generated from exchange
   * @param orderStatus {String} Status of the order at Exchange side, either executed successfully complete or trigger pending or cancelled
   * @param orderPrice {String} price of a particular order
   * @param triggerPrice {String} The price at which an order should be triggered 
   */
  var exports = function(stopLossOrderNo, orderStatus, orderPrice, triggerPrice,targetOrderNo,mainOrderNo) {
    this.stopLossOrderNo = stopLossOrderNo;
    this.targetOrderNo =targetOrderNo;
    this.orderStatus = orderStatus;
    this.orderPrice = orderPrice;
    this.triggerPrice = triggerPrice;
    this.mainOrderNo = mainOrderNo;
  };

  /**
   * Constructs a <code>TriggerOrder</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TriggerOrder} obj Optional instance to populate.
   * @return {module:model/TriggerOrder} The populated <code>TriggerOrder</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('stopLossOrderNo'))
        obj.stopLossOrderNo = ApiClient.convertToType(data['stopLossOrderNo'], 'String');
      if (data.hasOwnProperty('targetOrderNo'))
        obj.targetOrderNo = ApiClient.convertToType(data['targetOrderNo'], 'String');
      if (data.hasOwnProperty('orderStatus'))
        obj.orderStatus = ApiClient.convertToType(data['orderStatus'], 'String');
      if (data.hasOwnProperty('orderPrice'))
        obj.orderPrice = ApiClient.convertToType(data['orderPrice'], 'String');
      if (data.hasOwnProperty('triggerPrice'))
        obj.triggerPrice = ApiClient.convertToType(data['triggerPrice'], 'String');
        if (data.hasOwnProperty('mainOrderNo'))
        obj.mainOrderNo = ApiClient.convertToType(data['mainOrderNo'], 'String');
        
        
    }
    return obj;
  }

  /**
   * Unique Order identifier generated from exchange
   * @member {String} stopLossOrderNo
   */
  exports.prototype.stopLossOrderNo = undefined;

  /**
   * Status of the order at Exchange side, either executed successfully complete or trigger pending or cancelled
   * @member {String} orderStatus
   */
  exports.prototype.orderStatus = undefined;

  /**
   * price of a particular order
   * @member {String} orderPrice
   */
  exports.prototype.orderPrice = undefined;

  /**
   * The price at which an order should be triggered 
   * @member {String} triggerPrice
   */
  exports.prototype.triggerPrice = undefined;

  exports.prototype.targetOrderNo = undefined; 

  exports.prototype.mainOrderNo = undefined;

  return exports;

}));
