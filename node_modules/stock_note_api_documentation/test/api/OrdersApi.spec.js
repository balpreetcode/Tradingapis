/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StockNoteApiDocumentation);
  }
}(this, function(expect, StockNoteApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StockNoteApiDocumentation.OrdersApi();
  });

  describe('(package)', function() {
    describe('OrdersApi', function() {
      describe('cancelOrder', function() {
        it('should call cancelOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelOrder call and complete the assertions
          /*
          var xSessionToken = "xSessionToken_example";
          var orderNumber = "orderNumber_example";

          instance.cancelOrder(xSessionToken, orderNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StockNoteApiDocumentation.CancelOrderResponse);
            expect(data.serverTime).to.be.a('string');
            expect(data.serverTime).to.be("12/12/19 16:20:11");
            expect(data.msgId).to.be.a('string');
            expect(data.msgId).to.be("786cdd94-2fc9-4c38-8f14-672ec64dd032");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Success");
            expect(data.orderNumber).to.be.a('string');
            expect(data.orderNumber).to.be("190722000000243");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("Order cancellation request placed successfully");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cancelOrderBO', function() {
        it('should call cancelOrderBO successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelOrderBO call and complete the assertions
          /*
          var xSessionToken = "xSessionToken_example";
          var orderNumber = "orderNumber_example";

          instance.cancelOrderBO(xSessionToken, orderNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StockNoteApiDocumentation.CancelOrderResponse);
            expect(data.serverTime).to.be.a('string');
            expect(data.serverTime).to.be("12/12/19 16:20:11");
            expect(data.msgId).to.be.a('string');
            expect(data.msgId).to.be("786cdd94-2fc9-4c38-8f14-672ec64dd032");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Success");
            expect(data.orderNumber).to.be.a('string');
            expect(data.orderNumber).to.be("190722000000243");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("Order cancellation request placed successfully");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cancelOrderCO', function() {
        it('should call cancelOrderCO successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelOrderCO call and complete the assertions
          /*
          var xSessionToken = "xSessionToken_example";
          var orderNumber = "orderNumber_example";

          instance.cancelOrderCO(xSessionToken, orderNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StockNoteApiDocumentation.CancelOrderResponse);
            expect(data.serverTime).to.be.a('string');
            expect(data.serverTime).to.be("12/12/19 16:20:11");
            expect(data.msgId).to.be.a('string');
            expect(data.msgId).to.be("786cdd94-2fc9-4c38-8f14-672ec64dd032");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Success");
            expect(data.orderNumber).to.be.a('string');
            expect(data.orderNumber).to.be("190722000000243");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("Order cancellation request placed successfully");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderBook', function() {
        it('should call getOrderBook successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderBook call and complete the assertions
          /*
          var xSessionToken = "xSessionToken_example";

          instance.getOrderBook(xSessionToken, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StockNoteApiDocumentation.OrderBookResponse);
            expect(data.serverTime).to.be.a('string');
            expect(data.serverTime).to.be("12/12/19 16:20:11");
            expect(data.msgId).to.be.a('string');
            expect(data.msgId).to.be("786cdd94-2fc9-4c38-8f14-672ec64dd032");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Success");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("Request successful");
            {
              let dataCtr = data.orderBookDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StockNoteApiDocumentation.OrderBookEntry);
                expect(data.orderNumber).to.be.a('string');
                expect(data.orderNumber).to.be("191206000000079");
                expect(data.exchange).to.be.a('string');
                expect(data.exchange).to.be("BSE");
                expect(data.tradingSymbol).to.be.a('string');
                expect(data.tradingSymbol).to.be("RELIANCE");
                expect(data.symbolDescription).to.be.a('string');
                expect(data.symbolDescription).to.be("RELIANCE INDUSTRIES LTD.");
                expect(data.transactionType).to.be.a('string');
                expect(data.transactionType).to.be("BUY");
                expect(data.productCode).to.be.a('string');
                expect(data.productCode).to.be("MIS");
                expect(data.orderType).to.be.a('string');
                expect(data.orderType).to.be("L");
                expect(data.orderPrice).to.be.a('string');
                expect(data.orderPrice).to.be("1560.15");
                expect(data.quantity).to.be.a('string');
                expect(data.quantity).to.be("13");
                expect(data.disclosedQuantity).to.be.a('string');
                expect(data.disclosedQuantity).to.be("1");
                expect(data.triggerPrice).to.be.a('string');
                expect(data.triggerPrice).to.be("1090.00");
                expect(data.marketProtection).to.be.a('string');
                expect(data.marketProtection).to.be("3");
                expect(data.orderValidity).to.be.a('string');
                expect(data.orderValidity).to.be("DAY");
                expect(data.orderStatus).to.be.a('string');
                expect(data.orderStatus).to.be("Complete");
                expect(data.orderValue).to.be.a('string');
                expect(data.orderValue).to.be("20281.95");
                expect(data.instrumentName).to.be.a('string');
                expect(data.instrumentName).to.be("NA");
                expect(data.orderTime).to.be.a('string');
                expect(data.orderTime).to.be("06-Dec-2019 13:47:04");
                expect(data.userId).to.be.a('string');
                expect(data.userId).to.be("DV99999");
                expect(data.filledQuantity).to.be.a('string');
                expect(data.filledQuantity).to.be("13");
                expect(data.fillPrice).to.be.a('string');
                expect(data.fillPrice).to.be("1560.15");
                expect(data.averagePrice).to.be.a('string');
                expect(data.averagePrice).to.be("1560.15");
                expect(data.unfilledQuantity).to.be.a('string');
                expect(data.unfilledQuantity).to.be("0");
                expect(data.exchangeOrderId).to.be.a('string');
                expect(data.exchangeOrderId).to.be("1575608622401000995");
                expect(data.rejectionReason).to.be.a('string');
                expect(data.rejectionReason).to.be("NA");
                expect(data.exchangeConfirmationTime).to.be.a('string');
                expect(data.exchangeConfirmationTime).to.be("06-Dec-2019 14:14:47");
                expect(data.cancelledQuantity).to.be.a('string');
                expect(data.cancelledQuantity).to.be("0");
                expect(data.referenceLimitPrice).to.be.a('string');
                expect(data.referenceLimitPrice).to.be("0.00");
                expect(data.coverOrderPercentage).to.be.a('string');
                expect(data.coverOrderPercentage).to.be("0.00");
                expect(data.orderRemarks).to.be.a('string');
                expect(data.orderRemarks).to.be("--");
                expect(data.exchangeOrderNumber).to.be.a('string');
                expect(data.exchangeOrderNumber).to.be("1575608622401000995");
                expect(data.symbol).to.be.a('string');
                expect(data.symbol).to.be("52310_NFO");
                expect(data.displayStrikePrice).to.be.a('string');
                expect(data.displayStrikePrice).to.be("0.00");
                expect(data.displayNetQuantity).to.be.a('string');
                expect(data.displayNetQuantity).to.be("10");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("complete");
                expect(data.exchangeStatus).to.be.a('string');
                expect(data.exchangeStatus).to.be("complete");
                expect(data.expiry).to.be.a('string');
                expect(data.expiry).to.be("--");
                expect(data.pendingQuantity).to.be.a('string');
                expect(data.pendingQuantity).to.be("0");
                expect(data.instrument).to.be.a('string');
                expect(data.instrument).to.be("--");
                expect(data.scripName).to.be.a('string');
                expect(data.scripName).to.be("--");
                expect(data.totalQuanity).to.be.a('string');
                expect(data.totalQuanity).to.be("13");
                expect(data.optionType).to.be.a('string');
                expect(data.optionType).to.be("--");
                expect(data.orderPlaceBy).to.be.a('string');
                expect(data.orderPlaceBy).to.be("DV99999");
                expect(data.lotQuantity).to.be.a('string');
                expect(data.lotQuantity).to.be("1");
                expect(data.parentOrderId).to.be.a('string');
                expect(data.parentOrderId).to.be("200824000050316");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderStatus', function() {
        it('should call getOrderStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderStatus call and complete the assertions
          /*
          var xSessionToken = "xSessionToken_example";
          var orderNumber = "orderNumber_example";

          instance.getOrderStatus(xSessionToken, orderNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StockNoteApiDocumentation.OrderStatusResponse);
            expect(data.serverTime).to.be.a('string');
            expect(data.serverTime).to.be("12/12/19 16:20:11");
            expect(data.msgId).to.be.a('string');
            expect(data.msgId).to.be("786cdd94-2fc9-4c38-8f14-672ec64dd032");
            expect(data.orderNumber).to.be.a('string');
            expect(data.orderNumber).to.be("190722000000243");
            expect(data.orderStatus).to.be.a('string');
            expect(data.orderStatus).to.be("Success");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("Requested MIS Order placed successfully");
            expect(data.orderDetails).to.be.a(StockNoteApiDocumentation.OrderDetails);
                  expect(data.orderDetails.pendingQuantity).to.be.a('string');
              expect(data.orderDetails.pendingQuantity).to.be("0");
              expect(data.orderDetails.avgExecutionPrice).to.be.a('string');
              expect(data.orderDetails.avgExecutionPrice).to.be("1193.00");
              expect(data.orderDetails.orderPlacedBy).to.be.a('string');
              expect(data.orderDetails.orderPlacedBy).to.be("DV9999");
              expect(data.orderDetails.tradingSymbol).to.be.a('string');
              expect(data.orderDetails.tradingSymbol).to.be("RELIANCE");
              expect(data.orderDetails.triggerPrice).to.be.a('string');
              expect(data.orderDetails.triggerPrice).to.be("0.00");
              expect(data.orderDetails.exchange).to.be.a('string');
              expect(data.orderDetails.exchange).to.be("BSE");
              expect(data.orderDetails.totalQuantity).to.be.a('string');
              expect(data.orderDetails.totalQuantity).to.be("1");
              expect(data.orderDetails.expiry).to.be.a('string');
              expect(data.orderDetails.expiry).to.be("--");
              expect(data.orderDetails.transactionType).to.be.a('string');
              expect(data.orderDetails.transactionType).to.be("BUY");
              expect(data.orderDetails.productType).to.be.a('string');
              expect(data.orderDetails.productType).to.be("MIS");
              expect(data.orderDetails.orderType).to.be.a('string');
              expect(data.orderDetails.orderType).to.be("L");
              expect(data.orderDetails.quantity).to.be.a('string');
              expect(data.orderDetails.quantity).to.be("1");
              expect(data.orderDetails.filledQuantity).to.be.a('string');
              expect(data.orderDetails.filledQuantity).to.be("1");
              expect(data.orderDetails.orderPrice).to.be.a('string');
              expect(data.orderDetails.orderPrice).to.be("1240.00");
              expect(data.orderDetails.filledPrice).to.be.a('string');
              expect(data.orderDetails.filledPrice).to.be("1240.0");
              expect(data.orderDetails.exchangeOrderNo).to.be.a('string');
              expect(data.orderDetails.exchangeOrderNo).to.be("1565067682526005486");
              expect(data.orderDetails.orderValidity).to.be.a('string');
              expect(data.orderDetails.orderValidity).to.be("DAY");
              expect(data.orderDetails.orderTime).to.be.a('string');
              expect(data.orderDetails.orderTime).to.be("12/12/2019 16:20:09");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTriggerOrderNumbers', function() {
        it('should call getTriggerOrderNumbers successfully', function(done) {
          // TODO: uncomment, update parameter values for getTriggerOrderNumbers call and complete the assertions
          /*
          var xSessionToken = "xSessionToken_example";
          var orderNumber = "orderNumber_example";

          instance.getTriggerOrderNumbers(xSessionToken, orderNumber, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StockNoteApiDocumentation.TriggerOrdersResponse);
            expect(data.serverTime).to.be.a('string');
            expect(data.serverTime).to.be("12/12/19 16:20:11");
            expect(data.msgId).to.be.a('string');
            expect(data.msgId).to.be("786cdd94-2fc9-4c38-8f14-672ec64dd032");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Success");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("SubOrder details retrieved successfully.");
            {
              let dataCtr = data.triggerOrders;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(StockNoteApiDocumentation.TriggerOrder);
                expect(data.stopLossOrderNo).to.be.a('string');
                expect(data.stopLossOrderNo).to.be("191219000000063");
                expect(data.orderStatus).to.be.a('string');
                expect(data.orderStatus).to.be("Complete");
                expect(data.orderPrice).to.be.a('string');
                expect(data.orderPrice).to.be("351.20");
                expect(data.triggerPrice).to.be.a('string');
                expect(data.triggerPrice).to.be("331.20");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('modifyOrder', function() {
        it('should call modifyOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for modifyOrder call and complete the assertions
          /*
          var xSessionToken = "xSessionToken_example";
          var orderNumber = "orderNumber_example";
          var opts = {};
          opts.body = new StockNoteApiDocumentation.ModifyOrderRequest();
          opts.body.orderType = "L";
          opts.body.quantity = "3";
          opts.body.disclosedQuantity = "1";
          opts.body.orderValidity = "DAY";
          opts.body.price = "1240.00";
          opts.body.triggerPrice = "1070.00";
          opts.body.parentOrderId = "190707000000004";
          opts.body.marketProtection = "5";

          instance.modifyOrder(xSessionToken, orderNumber, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StockNoteApiDocumentation.OrderResponse);
            expect(data.serverTime).to.be.a('string');
            expect(data.serverTime).to.be("12/12/19 16:20:11");
            expect(data.msgId).to.be.a('string');
            expect(data.msgId).to.be("786cdd94-2fc9-4c38-8f14-672ec64dd032");
            expect(data.orderNumber).to.be.a('string');
            expect(data.orderNumber).to.be("191206000000079");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Success");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("MIS Order request placed successfully");
            expect(data.exchangeOrderStatus).to.be.a('string');
            expect(data.exchangeOrderStatus).to.be("complete");
            expect(data.rejectionReason).to.be.a('string');
            expect(data.rejectionReason).to.be("--");
            expect(data.orderDetails).to.be.a(StockNoteApiDocumentation.OrderDetails);
                  expect(data.orderDetails.pendingQuantity).to.be.a('string');
              expect(data.orderDetails.pendingQuantity).to.be("0");
              expect(data.orderDetails.avgExecutionPrice).to.be.a('string');
              expect(data.orderDetails.avgExecutionPrice).to.be("1193.00");
              expect(data.orderDetails.orderPlacedBy).to.be.a('string');
              expect(data.orderDetails.orderPlacedBy).to.be("DV9999");
              expect(data.orderDetails.tradingSymbol).to.be.a('string');
              expect(data.orderDetails.tradingSymbol).to.be("RELIANCE");
              expect(data.orderDetails.triggerPrice).to.be.a('string');
              expect(data.orderDetails.triggerPrice).to.be("0.00");
              expect(data.orderDetails.exchange).to.be.a('string');
              expect(data.orderDetails.exchange).to.be("BSE");
              expect(data.orderDetails.totalQuantity).to.be.a('string');
              expect(data.orderDetails.totalQuantity).to.be("1");
              expect(data.orderDetails.expiry).to.be.a('string');
              expect(data.orderDetails.expiry).to.be("--");
              expect(data.orderDetails.transactionType).to.be.a('string');
              expect(data.orderDetails.transactionType).to.be("BUY");
              expect(data.orderDetails.productType).to.be.a('string');
              expect(data.orderDetails.productType).to.be("MIS");
              expect(data.orderDetails.orderType).to.be.a('string');
              expect(data.orderDetails.orderType).to.be("L");
              expect(data.orderDetails.quantity).to.be.a('string');
              expect(data.orderDetails.quantity).to.be("1");
              expect(data.orderDetails.filledQuantity).to.be.a('string');
              expect(data.orderDetails.filledQuantity).to.be("1");
              expect(data.orderDetails.orderPrice).to.be.a('string');
              expect(data.orderDetails.orderPrice).to.be("1240.00");
              expect(data.orderDetails.filledPrice).to.be.a('string');
              expect(data.orderDetails.filledPrice).to.be("1240.0");
              expect(data.orderDetails.exchangeOrderNo).to.be.a('string');
              expect(data.orderDetails.exchangeOrderNo).to.be("1565067682526005486");
              expect(data.orderDetails.orderValidity).to.be.a('string');
              expect(data.orderDetails.orderValidity).to.be("DAY");
              expect(data.orderDetails.orderTime).to.be.a('string');
              expect(data.orderDetails.orderTime).to.be("12/12/2019 16:20:09");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('placeOrder', function() {
        it('should call placeOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for placeOrder call and complete the assertions
          /*
          var xSessionToken = "xSessionToken_example";
          var opts = {};
          opts.body = new StockNoteApiDocumentation.OrderRequest();
          opts.body.symbolName = "RELIANCE";
          opts.body.exchange = "BSE";
          opts.body.transactionType = "BUY";
          opts.body.orderType = "L";
          opts.body.quantity = "1";
          opts.body.disclosedQuantity = "1";
          opts.body.price = "1240.0";
          opts.body.priceType = "LTP";
          opts.body.marketProtection = "--";
          opts.body.orderValidity = "DAY";
          opts.body.afterMarketOrderFlag = "NO";
          opts.body.productType = "MIS";
          opts.body.triggerPrice = "0.00";

          instance.placeOrder(xSessionToken, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StockNoteApiDocumentation.OrderResponse);
            expect(data.serverTime).to.be.a('string');
            expect(data.serverTime).to.be("12/12/19 16:20:11");
            expect(data.msgId).to.be.a('string');
            expect(data.msgId).to.be("786cdd94-2fc9-4c38-8f14-672ec64dd032");
            expect(data.orderNumber).to.be.a('string');
            expect(data.orderNumber).to.be("191206000000079");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Success");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("MIS Order request placed successfully");
            expect(data.exchangeOrderStatus).to.be.a('string');
            expect(data.exchangeOrderStatus).to.be("complete");
            expect(data.rejectionReason).to.be.a('string');
            expect(data.rejectionReason).to.be("--");
            expect(data.orderDetails).to.be.a(StockNoteApiDocumentation.OrderDetails);
                  expect(data.orderDetails.pendingQuantity).to.be.a('string');
              expect(data.orderDetails.pendingQuantity).to.be("0");
              expect(data.orderDetails.avgExecutionPrice).to.be.a('string');
              expect(data.orderDetails.avgExecutionPrice).to.be("1193.00");
              expect(data.orderDetails.orderPlacedBy).to.be.a('string');
              expect(data.orderDetails.orderPlacedBy).to.be("DV9999");
              expect(data.orderDetails.tradingSymbol).to.be.a('string');
              expect(data.orderDetails.tradingSymbol).to.be("RELIANCE");
              expect(data.orderDetails.triggerPrice).to.be.a('string');
              expect(data.orderDetails.triggerPrice).to.be("0.00");
              expect(data.orderDetails.exchange).to.be.a('string');
              expect(data.orderDetails.exchange).to.be("BSE");
              expect(data.orderDetails.totalQuantity).to.be.a('string');
              expect(data.orderDetails.totalQuantity).to.be("1");
              expect(data.orderDetails.expiry).to.be.a('string');
              expect(data.orderDetails.expiry).to.be("--");
              expect(data.orderDetails.transactionType).to.be.a('string');
              expect(data.orderDetails.transactionType).to.be("BUY");
              expect(data.orderDetails.productType).to.be.a('string');
              expect(data.orderDetails.productType).to.be("MIS");
              expect(data.orderDetails.orderType).to.be.a('string');
              expect(data.orderDetails.orderType).to.be("L");
              expect(data.orderDetails.quantity).to.be.a('string');
              expect(data.orderDetails.quantity).to.be("1");
              expect(data.orderDetails.filledQuantity).to.be.a('string');
              expect(data.orderDetails.filledQuantity).to.be("1");
              expect(data.orderDetails.orderPrice).to.be.a('string');
              expect(data.orderDetails.orderPrice).to.be("1240.00");
              expect(data.orderDetails.filledPrice).to.be.a('string');
              expect(data.orderDetails.filledPrice).to.be("1240.0");
              expect(data.orderDetails.exchangeOrderNo).to.be.a('string');
              expect(data.orderDetails.exchangeOrderNo).to.be("1565067682526005486");
              expect(data.orderDetails.orderValidity).to.be.a('string');
              expect(data.orderDetails.orderValidity).to.be("DAY");
              expect(data.orderDetails.orderTime).to.be.a('string');
              expect(data.orderDetails.orderTime).to.be("12/12/2019 16:20:09");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('placeOrderBO', function() {
        it('should call placeOrderBO successfully', function(done) {
          // TODO: uncomment, update parameter values for placeOrderBO call and complete the assertions
          /*
          var xSessionToken = "xSessionToken_example";
          var opts = {};
          opts.body = new StockNoteApiDocumentation.OrderRequestBO();
          opts.body.symbolName = "RELIANCE";
          opts.body.exchange = "NSE";
          opts.body.transactionType = "BUY";
          opts.body.orderType = "L";
          opts.body.quantity = "1";
          opts.body.disclosedQuantity = "1";
          opts.body.price = "1240.0";
          opts.body.priceType = "LTP";
          opts.body.orderValidity = "DAY";
          opts.body.productType = "BO";
          opts.body.squareOffValue = "5";
          opts.body.stopLossValue = "5";
          opts.body.valueType = "Ticks";
          opts.body.trailingStopLoss = "5";

          instance.placeOrderBO(xSessionToken, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StockNoteApiDocumentation.OrderResponseBO);
            expect(data.serverTime).to.be.a('string');
            expect(data.serverTime).to.be("12/12/19 16:20:11");
            expect(data.msgId).to.be.a('string');
            expect(data.msgId).to.be("786cdd94-2fc9-4c38-8f14-672ec64dd032");
            expect(data.orderNumber).to.be.a('string');
            expect(data.orderNumber).to.be("190726000001077");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Success");
            expect(data.exchangeOrderStatus).to.be.a('string');
            expect(data.exchangeOrderStatus).to.be("Executed");
            expect(data.rejectionReason).to.be.a('string');
            expect(data.rejectionReason).to.be("--");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("BO Order request placed successfully");
            expect(data.orderDetails).to.be.a(StockNoteApiDocumentation.OrderDetailsBO);
                  expect(data.orderDetails.pendingQuantity).to.be.a('string');
              expect(data.orderDetails.pendingQuantity).to.be("0");
              expect(data.orderDetails.avgExecutionPrice).to.be.a('string');
              expect(data.orderDetails.avgExecutionPrice).to.be("1193.00");
              expect(data.orderDetails.orderPlacedBy).to.be.a('string');
              expect(data.orderDetails.orderPlacedBy).to.be("DV9999");
              expect(data.orderDetails.tradingSymbol).to.be.a('string');
              expect(data.orderDetails.tradingSymbol).to.be("RELIANCE");
              expect(data.orderDetails.triggerPrice).to.be.a('string');
              expect(data.orderDetails.triggerPrice).to.be("0.00");
              expect(data.orderDetails.exchange).to.be.a('string');
              expect(data.orderDetails.exchange).to.be("NSE");
              expect(data.orderDetails.totalQuantity).to.be.a('string');
              expect(data.orderDetails.totalQuantity).to.be("1");
              expect(data.orderDetails.expiry).to.be.a('string');
              expect(data.orderDetails.expiry).to.be("--");
              expect(data.orderDetails.transactionType).to.be.a('string');
              expect(data.orderDetails.transactionType).to.be("BUY");
              expect(data.orderDetails.productType).to.be.a('string');
              expect(data.orderDetails.productType).to.be("BO");
              expect(data.orderDetails.orderType).to.be.a('string');
              expect(data.orderDetails.orderType).to.be("L");
              expect(data.orderDetails.quantity).to.be.a('string');
              expect(data.orderDetails.quantity).to.be("1");
              expect(data.orderDetails.filledQuantity).to.be.a('string');
              expect(data.orderDetails.filledQuantity).to.be("1");
              expect(data.orderDetails.orderPrice).to.be.a('string');
              expect(data.orderDetails.orderPrice).to.be("1240.00");
              expect(data.orderDetails.filledPrice).to.be.a('string');
              expect(data.orderDetails.filledPrice).to.be("1240.0");
              expect(data.orderDetails.exchangeOrderNo).to.be.a('string');
              expect(data.orderDetails.exchangeOrderNo).to.be("1565067682526005486");
              expect(data.orderDetails.orderValidity).to.be.a('string');
              expect(data.orderDetails.orderValidity).to.be("DAY");
              expect(data.orderDetails.orderTime).to.be.a('string');
              expect(data.orderDetails.orderTime).to.be("12/12/2019 16:20:09");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('placeOrderCO', function() {
        it('should call placeOrderCO successfully', function(done) {
          // TODO: uncomment, update parameter values for placeOrderCO call and complete the assertions
          /*
          var xSessionToken = "xSessionToken_example";
          var opts = {};
          opts.body = new StockNoteApiDocumentation.OrderRequestCO();
          opts.body.symbolName = "RELIANCE";
          opts.body.exchange = "BSE";
          opts.body.transactionType = "BUY";
          opts.body.orderType = "L";
          opts.body.quantity = "1";
          opts.body.disclosedQuantity = "1";
          opts.body.price = "1240.0";
          opts.body.orderValidity = "DAY";
          opts.body.productType = "CO";
          opts.body.triggerPrice = "1070.00";

          instance.placeOrderCO(xSessionToken, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StockNoteApiDocumentation.OrderResponseCO);
            expect(data.serverTime).to.be.a('string');
            expect(data.serverTime).to.be("12/12/19 16:20:11");
            expect(data.msgId).to.be.a('string');
            expect(data.msgId).to.be("786cdd94-2fc9-4c38-8f14-672ec64dd032");
            expect(data.orderNumber).to.be.a('string');
            expect(data.orderNumber).to.be("190726000001077");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("Success");
            expect(data.exchangeOrderStatus).to.be.a('string');
            expect(data.exchangeOrderStatus).to.be("Executed");
            expect(data.rejectionReason).to.be.a('string');
            expect(data.rejectionReason).to.be("--");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("CO Order request placed successfully");
            expect(data.orderDetails).to.be.a(StockNoteApiDocumentation.OrderDetailsCO);
                  expect(data.orderDetails.pendingQuantity).to.be.a('string');
              expect(data.orderDetails.pendingQuantity).to.be("0");
              expect(data.orderDetails.avgExecutionPrice).to.be.a('string');
              expect(data.orderDetails.avgExecutionPrice).to.be("1193.00");
              expect(data.orderDetails.orderPlacedBy).to.be.a('string');
              expect(data.orderDetails.orderPlacedBy).to.be("DV9999");
              expect(data.orderDetails.tradingSymbol).to.be.a('string');
              expect(data.orderDetails.tradingSymbol).to.be("RELIANCE");
              expect(data.orderDetails.triggerPrice).to.be.a('string');
              expect(data.orderDetails.triggerPrice).to.be("0.00");
              expect(data.orderDetails.exchange).to.be.a('string');
              expect(data.orderDetails.exchange).to.be("BSE");
              expect(data.orderDetails.totalQuantity).to.be.a('string');
              expect(data.orderDetails.totalQuantity).to.be("1");
              expect(data.orderDetails.expiry).to.be.a('string');
              expect(data.orderDetails.expiry).to.be("--");
              expect(data.orderDetails.transactionType).to.be.a('string');
              expect(data.orderDetails.transactionType).to.be("BUY");
              expect(data.orderDetails.productType).to.be.a('string');
              expect(data.orderDetails.productType).to.be("CO");
              expect(data.orderDetails.orderType).to.be.a('string');
              expect(data.orderDetails.orderType).to.be("L");
              expect(data.orderDetails.quantity).to.be.a('string');
              expect(data.orderDetails.quantity).to.be("1");
              expect(data.orderDetails.filledQuantity).to.be.a('string');
              expect(data.orderDetails.filledQuantity).to.be("1");
              expect(data.orderDetails.orderPrice).to.be.a('string');
              expect(data.orderDetails.orderPrice).to.be("1240.00");
              expect(data.orderDetails.filledPrice).to.be.a('string');
              expect(data.orderDetails.filledPrice).to.be("1240.0");
              expect(data.orderDetails.exchangeOrderNo).to.be.a('string');
              expect(data.orderDetails.exchangeOrderNo).to.be("1565067682526005486");
              expect(data.orderDetails.orderValidity).to.be.a('string');
              expect(data.orderDetails.orderValidity).to.be("DAY");
              expect(data.orderDetails.orderTime).to.be.a('string');
              expect(data.orderDetails.orderTime).to.be("12/12/2019 16:20:09");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
