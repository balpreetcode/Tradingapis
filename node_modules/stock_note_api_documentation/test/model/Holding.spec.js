/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StockNoteApiDocumentation);
  }
}(this, function(expect, StockNoteApiDocumentation) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Holding', function() {
      beforeEach(function() {
        instance = new StockNoteApiDocumentation.Holding();
      });

      it('should create an instance of Holding', function() {
        // TODO: update the code to test Holding
        expect(instance).to.be.a(StockNoteApiDocumentation.Holding);
      });

      it('should have the property averagePrice (base name: "averagePrice")', function() {
        // TODO: update the code to test the property averagePrice
        expect(instance).to.have.property('averagePrice');
        // expect(instance.averagePrice).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property markToMarketPrice (base name: "markToMarketPrice")', function() {
        // TODO: update the code to test the property markToMarketPrice
        expect(instance).to.have.property('markToMarketPrice');
        // expect(instance.markToMarketPrice).to.be(expectedValueLiteral);
      });

      it('should have the property lastTradedPrice (base name: "lastTradedPrice")', function() {
        // TODO: update the code to test the property lastTradedPrice
        expect(instance).to.have.property('lastTradedPrice');
        // expect(instance.lastTradedPrice).to.be(expectedValueLiteral);
      });

      it('should have the property previousClose (base name: "previousClose")', function() {
        // TODO: update the code to test the property previousClose
        expect(instance).to.have.property('previousClose');
        // expect(instance.previousClose).to.be(expectedValueLiteral);
      });

      it('should have the property productCode (base name: "productCode")', function() {
        // TODO: update the code to test the property productCode
        expect(instance).to.have.property('productCode');
        // expect(instance.productCode).to.be(expectedValueLiteral);
      });

      it('should have the property symbolDescription (base name: "symbolDescription")', function() {
        // TODO: update the code to test the property symbolDescription
        expect(instance).to.have.property('symbolDescription');
        // expect(instance.symbolDescription).to.be(expectedValueLiteral);
      });

      it('should have the property tradingSymbol (base name: "tradingSymbol")', function() {
        // TODO: update the code to test the property tradingSymbol
        expect(instance).to.have.property('tradingSymbol');
        // expect(instance.tradingSymbol).to.be(expectedValueLiteral);
      });

      it('should have the property totalGainAndLoss (base name: "totalGainAndLoss")', function() {
        // TODO: update the code to test the property totalGainAndLoss
        expect(instance).to.have.property('totalGainAndLoss');
        // expect(instance.totalGainAndLoss).to.be(expectedValueLiteral);
      });

      it('should have the property calculatedNetQuantity (base name: "calculatedNetQuantity")', function() {
        // TODO: update the code to test the property calculatedNetQuantity
        expect(instance).to.have.property('calculatedNetQuantity');
        // expect(instance.calculatedNetQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property holdingsQuantity (base name: "holdingsQuantity")', function() {
        // TODO: update the code to test the property holdingsQuantity
        expect(instance).to.have.property('holdingsQuantity');
        // expect(instance.holdingsQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property collateralQuantity (base name: "collateralQuantity")', function() {
        // TODO: update the code to test the property collateralQuantity
        expect(instance).to.have.property('collateralQuantity');
        // expect(instance.collateralQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property holdingsValue (base name: "holdingsValue")', function() {
        // TODO: update the code to test the property holdingsValue
        expect(instance).to.have.property('holdingsValue');
        // expect(instance.holdingsValue).to.be(expectedValueLiteral);
      });

      it('should have the property isin (base name: "isin")', function() {
        // TODO: update the code to test the property isin
        expect(instance).to.have.property('isin');
        // expect(instance.isin).to.be(expectedValueLiteral);
      });

      it('should have the property sellableQuantity (base name: "sellableQuantity")', function() {
        // TODO: update the code to test the property sellableQuantity
        expect(instance).to.have.property('sellableQuantity');
        // expect(instance.sellableQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property totalMarketToMarketPrice (base name: "totalMarketToMarketPrice")', function() {
        // TODO: update the code to test the property totalMarketToMarketPrice
        expect(instance).to.have.property('totalMarketToMarketPrice');
        // expect(instance.totalMarketToMarketPrice).to.be(expectedValueLiteral);
      });

    });
  });

}));
