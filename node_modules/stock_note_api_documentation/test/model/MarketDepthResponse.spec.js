/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StockNoteApiDocumentation);
  }
}(this, function(expect, StockNoteApiDocumentation) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MarketDepthResponse', function() {
      beforeEach(function() {
        instance = new StockNoteApiDocumentation.MarketDepthResponse();
      });

      it('should create an instance of MarketDepthResponse', function() {
        // TODO: update the code to test MarketDepthResponse
        expect(instance).to.be.a(StockNoteApiDocumentation.MarketDepthResponse);
      });

      it('should have the property serverTime (base name: "serverTime")', function() {
        // TODO: update the code to test the property serverTime
        expect(instance).to.have.property('serverTime');
        // expect(instance.serverTime).to.be(expectedValueLiteral);
      });

      it('should have the property msgId (base name: "msgId")', function() {
        // TODO: update the code to test the property msgId
        expect(instance).to.have.property('msgId');
        // expect(instance.msgId).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property statusMessage (base name: "statusMessage")', function() {
        // TODO: update the code to test the property statusMessage
        expect(instance).to.have.property('statusMessage');
        // expect(instance.statusMessage).to.be(expectedValueLiteral);
      });

      it('should have the property symbolName (base name: "symbolName")', function() {
        // TODO: update the code to test the property symbolName
        expect(instance).to.have.property('symbolName');
        // expect(instance.symbolName).to.be(expectedValueLiteral);
      });

      it('should have the property tradingSymbol (base name: "tradingSymbol")', function() {
        // TODO: update the code to test the property tradingSymbol
        expect(instance).to.have.property('tradingSymbol');
        // expect(instance.tradingSymbol).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property companyName (base name: "companyName")', function() {
        // TODO: update the code to test the property companyName
        expect(instance).to.have.property('companyName');
        // expect(instance.companyName).to.be(expectedValueLiteral);
      });

      it('should have the property lastTradedTime (base name: "lastTradedTime")', function() {
        // TODO: update the code to test the property lastTradedTime
        expect(instance).to.have.property('lastTradedTime');
        // expect(instance.lastTradedTime).to.be(expectedValueLiteral);
      });

      it('should have the property lastTradedPrice (base name: "lastTradedPrice")', function() {
        // TODO: update the code to test the property lastTradedPrice
        expect(instance).to.have.property('lastTradedPrice');
        // expect(instance.lastTradedPrice).to.be(expectedValueLiteral);
      });

      it('should have the property previousClose (base name: "previousClose")', function() {
        // TODO: update the code to test the property previousClose
        expect(instance).to.have.property('previousClose');
        // expect(instance.previousClose).to.be(expectedValueLiteral);
      });

      it('should have the property changeValue (base name: "changeValue")', function() {
        // TODO: update the code to test the property changeValue
        expect(instance).to.have.property('changeValue');
        // expect(instance.changeValue).to.be(expectedValueLiteral);
      });

      it('should have the property changePercentage (base name: "changePercentage")', function() {
        // TODO: update the code to test the property changePercentage
        expect(instance).to.have.property('changePercentage');
        // expect(instance.changePercentage).to.be(expectedValueLiteral);
      });

      it('should have the property lastTradedQuantity (base name: "lastTradedQuantity")', function() {
        // TODO: update the code to test the property lastTradedQuantity
        expect(instance).to.have.property('lastTradedQuantity');
        // expect(instance.lastTradedQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property lowerCircuitLimit (base name: "lowerCircuitLimit")', function() {
        // TODO: update the code to test the property lowerCircuitLimit
        expect(instance).to.have.property('lowerCircuitLimit');
        // expect(instance.lowerCircuitLimit).to.be(expectedValueLiteral);
      });

      it('should have the property upperCircuitLimit (base name: "upperCircuitLimit")', function() {
        // TODO: update the code to test the property upperCircuitLimit
        expect(instance).to.have.property('upperCircuitLimit');
        // expect(instance.upperCircuitLimit).to.be(expectedValueLiteral);
      });

      it('should have the property averagePrice (base name: "averagePrice")', function() {
        // TODO: update the code to test the property averagePrice
        expect(instance).to.have.property('averagePrice');
        // expect(instance.averagePrice).to.be(expectedValueLiteral);
      });

      it('should have the property openValue (base name: "openValue")', function() {
        // TODO: update the code to test the property openValue
        expect(instance).to.have.property('openValue');
        // expect(instance.openValue).to.be(expectedValueLiteral);
      });

      it('should have the property highValue (base name: "highValue")', function() {
        // TODO: update the code to test the property highValue
        expect(instance).to.have.property('highValue');
        // expect(instance.highValue).to.be(expectedValueLiteral);
      });

      it('should have the property lowValue (base name: "lowValue")', function() {
        // TODO: update the code to test the property lowValue
        expect(instance).to.have.property('lowValue');
        // expect(instance.lowValue).to.be(expectedValueLiteral);
      });

      it('should have the property closeValue (base name: "closeValue")', function() {
        // TODO: update the code to test the property closeValue
        expect(instance).to.have.property('closeValue');
        // expect(instance.closeValue).to.be(expectedValueLiteral);
      });

      it('should have the property totalBuyQuantity (base name: "totalBuyQuantity")', function() {
        // TODO: update the code to test the property totalBuyQuantity
        expect(instance).to.have.property('totalBuyQuantity');
        // expect(instance.totalBuyQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property totalSellQuantity (base name: "totalSellQuantity")', function() {
        // TODO: update the code to test the property totalSellQuantity
        expect(instance).to.have.property('totalSellQuantity');
        // expect(instance.totalSellQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property totalTradedValue (base name: "totalTradedValue")', function() {
        // TODO: update the code to test the property totalTradedValue
        expect(instance).to.have.property('totalTradedValue');
        // expect(instance.totalTradedValue).to.be(expectedValueLiteral);
      });

      it('should have the property totalTradedVolume (base name: "totalTradedVolume")', function() {
        // TODO: update the code to test the property totalTradedVolume
        expect(instance).to.have.property('totalTradedVolume');
        // expect(instance.totalTradedVolume).to.be(expectedValueLiteral);
      });

      it('should have the property yearlyHighPrice (base name: "yearlyHighPrice")', function() {
        // TODO: update the code to test the property yearlyHighPrice
        expect(instance).to.have.property('yearlyHighPrice');
        // expect(instance.yearlyHighPrice).to.be(expectedValueLiteral);
      });

      it('should have the property yearlyLowPrice (base name: "yearlyLowPrice")', function() {
        // TODO: update the code to test the property yearlyLowPrice
        expect(instance).to.have.property('yearlyLowPrice');
        // expect(instance.yearlyLowPrice).to.be(expectedValueLiteral);
      });

      it('should have the property tickSize (base name: "tickSize")', function() {
        // TODO: update the code to test the property tickSize
        expect(instance).to.have.property('tickSize');
        // expect(instance.tickSize).to.be(expectedValueLiteral);
      });

      it('should have the property openInterest (base name: "openInterest")', function() {
        // TODO: update the code to test the property openInterest
        expect(instance).to.have.property('openInterest');
        // expect(instance.openInterest).to.be(expectedValueLiteral);
      });

      it('should have the property bestBids (base name: "bestBids")', function() {
        // TODO: update the code to test the property bestBids
        expect(instance).to.have.property('bestBids');
        // expect(instance.bestBids).to.be(expectedValueLiteral);
      });

      it('should have the property bestAsks (base name: "bestAsks")', function() {
        // TODO: update the code to test the property bestAsks
        expect(instance).to.have.property('bestAsks');
        // expect(instance.bestAsks).to.be(expectedValueLiteral);
      });

      it('should have the property expiryDate (base name: "expiryDate")', function() {
        // TODO: update the code to test the property expiryDate
        expect(instance).to.have.property('expiryDate');
        // expect(instance.expiryDate).to.be(expectedValueLiteral);
      });

      it('should have the property spotPrice (base name: "spotPrice")', function() {
        // TODO: update the code to test the property spotPrice
        expect(instance).to.have.property('spotPrice');
        // expect(instance.spotPrice).to.be(expectedValueLiteral);
      });

      it('should have the property instrument (base name: "instrument")', function() {
        // TODO: update the code to test the property instrument
        expect(instance).to.have.property('instrument');
        // expect(instance.instrument).to.be(expectedValueLiteral);
      });

      it('should have the property lotQuantity (base name: "lotQuantity")', function() {
        // TODO: update the code to test the property lotQuantity
        expect(instance).to.have.property('lotQuantity');
        // expect(instance.lotQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property listingId (base name: "listingId")', function() {
        // TODO: update the code to test the property listingId
        expect(instance).to.have.property('listingId');
        // expect(instance.listingId).to.be(expectedValueLiteral);
      });

      it('should have the property openInterestChange (base name: "openInterestChange")', function() {
        // TODO: update the code to test the property openInterestChange
        expect(instance).to.have.property('openInterestChange');
        // expect(instance.openInterestChange).to.be(expectedValueLiteral);
      });

      it('should have the property getoIChangePer (base name: "getoIChangePer")', function() {
        // TODO: update the code to test the property getoIChangePer
        expect(instance).to.have.property('getoIChangePer');
        // expect(instance.getoIChangePer).to.be(expectedValueLiteral);
      });

    });
  });

}));
