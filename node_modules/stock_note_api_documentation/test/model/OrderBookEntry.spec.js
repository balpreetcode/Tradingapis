/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StockNoteApiDocumentation);
  }
}(this, function(expect, StockNoteApiDocumentation) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderBookEntry', function() {
      beforeEach(function() {
        instance = new StockNoteApiDocumentation.OrderBookEntry();
      });

      it('should create an instance of OrderBookEntry', function() {
        // TODO: update the code to test OrderBookEntry
        expect(instance).to.be.a(StockNoteApiDocumentation.OrderBookEntry);
      });

      it('should have the property orderNumber (base name: "orderNumber")', function() {
        // TODO: update the code to test the property orderNumber
        expect(instance).to.have.property('orderNumber');
        // expect(instance.orderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property tradingSymbol (base name: "tradingSymbol")', function() {
        // TODO: update the code to test the property tradingSymbol
        expect(instance).to.have.property('tradingSymbol');
        // expect(instance.tradingSymbol).to.be(expectedValueLiteral);
      });

      it('should have the property symbolDescription (base name: "symbolDescription")', function() {
        // TODO: update the code to test the property symbolDescription
        expect(instance).to.have.property('symbolDescription');
        // expect(instance.symbolDescription).to.be(expectedValueLiteral);
      });

      it('should have the property transactionType (base name: "transactionType")', function() {
        // TODO: update the code to test the property transactionType
        expect(instance).to.have.property('transactionType');
        // expect(instance.transactionType).to.be(expectedValueLiteral);
      });

      it('should have the property productCode (base name: "productCode")', function() {
        // TODO: update the code to test the property productCode
        expect(instance).to.have.property('productCode');
        // expect(instance.productCode).to.be(expectedValueLiteral);
      });

      it('should have the property orderType (base name: "orderType")', function() {
        // TODO: update the code to test the property orderType
        expect(instance).to.have.property('orderType');
        // expect(instance.orderType).to.be(expectedValueLiteral);
      });

      it('should have the property orderPrice (base name: "orderPrice")', function() {
        // TODO: update the code to test the property orderPrice
        expect(instance).to.have.property('orderPrice');
        // expect(instance.orderPrice).to.be(expectedValueLiteral);
      });

      it('should have the property quantity (base name: "quantity")', function() {
        // TODO: update the code to test the property quantity
        expect(instance).to.have.property('quantity');
        // expect(instance.quantity).to.be(expectedValueLiteral);
      });

      it('should have the property disclosedQuantity (base name: "disclosedQuantity")', function() {
        // TODO: update the code to test the property disclosedQuantity
        expect(instance).to.have.property('disclosedQuantity');
        // expect(instance.disclosedQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property triggerPrice (base name: "triggerPrice")', function() {
        // TODO: update the code to test the property triggerPrice
        expect(instance).to.have.property('triggerPrice');
        // expect(instance.triggerPrice).to.be(expectedValueLiteral);
      });

      it('should have the property marketProtection (base name: "marketProtection")', function() {
        // TODO: update the code to test the property marketProtection
        expect(instance).to.have.property('marketProtection');
        // expect(instance.marketProtection).to.be(expectedValueLiteral);
      });

      it('should have the property orderValidity (base name: "orderValidity")', function() {
        // TODO: update the code to test the property orderValidity
        expect(instance).to.have.property('orderValidity');
        // expect(instance.orderValidity).to.be(expectedValueLiteral);
      });

      it('should have the property orderStatus (base name: "orderStatus")', function() {
        // TODO: update the code to test the property orderStatus
        expect(instance).to.have.property('orderStatus');
        // expect(instance.orderStatus).to.be(expectedValueLiteral);
      });

      it('should have the property orderValue (base name: "orderValue")', function() {
        // TODO: update the code to test the property orderValue
        expect(instance).to.have.property('orderValue');
        // expect(instance.orderValue).to.be(expectedValueLiteral);
      });

      it('should have the property instrumentName (base name: "instrumentName")', function() {
        // TODO: update the code to test the property instrumentName
        expect(instance).to.have.property('instrumentName');
        // expect(instance.instrumentName).to.be(expectedValueLiteral);
      });

      it('should have the property orderTime (base name: "orderTime")', function() {
        // TODO: update the code to test the property orderTime
        expect(instance).to.have.property('orderTime');
        // expect(instance.orderTime).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property filledQuantity (base name: "filledQuantity")', function() {
        // TODO: update the code to test the property filledQuantity
        expect(instance).to.have.property('filledQuantity');
        // expect(instance.filledQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property fillPrice (base name: "fillPrice")', function() {
        // TODO: update the code to test the property fillPrice
        expect(instance).to.have.property('fillPrice');
        // expect(instance.fillPrice).to.be(expectedValueLiteral);
      });

      it('should have the property averagePrice (base name: "averagePrice")', function() {
        // TODO: update the code to test the property averagePrice
        expect(instance).to.have.property('averagePrice');
        // expect(instance.averagePrice).to.be(expectedValueLiteral);
      });

      it('should have the property unfilledQuantity (base name: "unfilledQuantity")', function() {
        // TODO: update the code to test the property unfilledQuantity
        expect(instance).to.have.property('unfilledQuantity');
        // expect(instance.unfilledQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeOrderId (base name: "exchangeOrderId")', function() {
        // TODO: update the code to test the property exchangeOrderId
        expect(instance).to.have.property('exchangeOrderId');
        // expect(instance.exchangeOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property rejectionReason (base name: "rejectionReason")', function() {
        // TODO: update the code to test the property rejectionReason
        expect(instance).to.have.property('rejectionReason');
        // expect(instance.rejectionReason).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeConfirmationTime (base name: "exchangeConfirmationTime")', function() {
        // TODO: update the code to test the property exchangeConfirmationTime
        expect(instance).to.have.property('exchangeConfirmationTime');
        // expect(instance.exchangeConfirmationTime).to.be(expectedValueLiteral);
      });

      it('should have the property cancelledQuantity (base name: "cancelledQuantity")', function() {
        // TODO: update the code to test the property cancelledQuantity
        expect(instance).to.have.property('cancelledQuantity');
        // expect(instance.cancelledQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property referenceLimitPrice (base name: "referenceLimitPrice")', function() {
        // TODO: update the code to test the property referenceLimitPrice
        expect(instance).to.have.property('referenceLimitPrice');
        // expect(instance.referenceLimitPrice).to.be(expectedValueLiteral);
      });

      it('should have the property coverOrderPercentage (base name: "coverOrderPercentage")', function() {
        // TODO: update the code to test the property coverOrderPercentage
        expect(instance).to.have.property('coverOrderPercentage');
        // expect(instance.coverOrderPercentage).to.be(expectedValueLiteral);
      });

      it('should have the property orderRemarks (base name: "orderRemarks")', function() {
        // TODO: update the code to test the property orderRemarks
        expect(instance).to.have.property('orderRemarks');
        // expect(instance.orderRemarks).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeOrderNumber (base name: "exchangeOrderNumber")', function() {
        // TODO: update the code to test the property exchangeOrderNumber
        expect(instance).to.have.property('exchangeOrderNumber');
        // expect(instance.exchangeOrderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property symbol
        expect(instance).to.have.property('symbol');
        // expect(instance.symbol).to.be(expectedValueLiteral);
      });

      it('should have the property displayStrikePrice (base name: "displayStrikePrice")', function() {
        // TODO: update the code to test the property displayStrikePrice
        expect(instance).to.have.property('displayStrikePrice');
        // expect(instance.displayStrikePrice).to.be(expectedValueLiteral);
      });

      it('should have the property displayNetQuantity (base name: "displayNetQuantity")', function() {
        // TODO: update the code to test the property displayNetQuantity
        expect(instance).to.have.property('displayNetQuantity');
        // expect(instance.displayNetQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeStatus (base name: "exchangeStatus")', function() {
        // TODO: update the code to test the property exchangeStatus
        expect(instance).to.have.property('exchangeStatus');
        // expect(instance.exchangeStatus).to.be(expectedValueLiteral);
      });

      it('should have the property expiry (base name: "expiry")', function() {
        // TODO: update the code to test the property expiry
        expect(instance).to.have.property('expiry');
        // expect(instance.expiry).to.be(expectedValueLiteral);
      });

      it('should have the property pendingQuantity (base name: "pendingQuantity")', function() {
        // TODO: update the code to test the property pendingQuantity
        expect(instance).to.have.property('pendingQuantity');
        // expect(instance.pendingQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property instrument (base name: "instrument")', function() {
        // TODO: update the code to test the property instrument
        expect(instance).to.have.property('instrument');
        // expect(instance.instrument).to.be(expectedValueLiteral);
      });

      it('should have the property scripName (base name: "scripName")', function() {
        // TODO: update the code to test the property scripName
        expect(instance).to.have.property('scripName');
        // expect(instance.scripName).to.be(expectedValueLiteral);
      });

      it('should have the property totalQuanity (base name: "totalQuanity")', function() {
        // TODO: update the code to test the property totalQuanity
        expect(instance).to.have.property('totalQuanity');
        // expect(instance.totalQuanity).to.be(expectedValueLiteral);
      });

      it('should have the property optionType (base name: "optionType")', function() {
        // TODO: update the code to test the property optionType
        expect(instance).to.have.property('optionType');
        // expect(instance.optionType).to.be(expectedValueLiteral);
      });

      it('should have the property orderPlaceBy (base name: "orderPlaceBy")', function() {
        // TODO: update the code to test the property orderPlaceBy
        expect(instance).to.have.property('orderPlaceBy');
        // expect(instance.orderPlaceBy).to.be(expectedValueLiteral);
      });

      it('should have the property lotQuantity (base name: "lotQuantity")', function() {
        // TODO: update the code to test the property lotQuantity
        expect(instance).to.have.property('lotQuantity');
        // expect(instance.lotQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property parentOrderId (base name: "parentOrderId")', function() {
        // TODO: update the code to test the property parentOrderId
        expect(instance).to.have.property('parentOrderId');
        // expect(instance.parentOrderId).to.be(expectedValueLiteral);
      });

    });
  });

}));
