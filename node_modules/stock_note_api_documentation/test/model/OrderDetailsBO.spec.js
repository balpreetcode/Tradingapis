/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StockNoteApiDocumentation);
  }
}(this, function(expect, StockNoteApiDocumentation) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderDetailsBO', function() {
      beforeEach(function() {
        instance = new StockNoteApiDocumentation.OrderDetailsBO();
      });

      it('should create an instance of OrderDetailsBO', function() {
        // TODO: update the code to test OrderDetailsBO
        expect(instance).to.be.a(StockNoteApiDocumentation.OrderDetailsBO);
      });

      it('should have the property pendingQuantity (base name: "pendingQuantity")', function() {
        // TODO: update the code to test the property pendingQuantity
        expect(instance).to.have.property('pendingQuantity');
        // expect(instance.pendingQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property avgExecutionPrice (base name: "avgExecutionPrice")', function() {
        // TODO: update the code to test the property avgExecutionPrice
        expect(instance).to.have.property('avgExecutionPrice');
        // expect(instance.avgExecutionPrice).to.be(expectedValueLiteral);
      });

      it('should have the property orderPlacedBy (base name: "orderPlacedBy")', function() {
        // TODO: update the code to test the property orderPlacedBy
        expect(instance).to.have.property('orderPlacedBy');
        // expect(instance.orderPlacedBy).to.be(expectedValueLiteral);
      });

      it('should have the property tradingSymbol (base name: "tradingSymbol")', function() {
        // TODO: update the code to test the property tradingSymbol
        expect(instance).to.have.property('tradingSymbol');
        // expect(instance.tradingSymbol).to.be(expectedValueLiteral);
      });

      it('should have the property triggerPrice (base name: "triggerPrice")', function() {
        // TODO: update the code to test the property triggerPrice
        expect(instance).to.have.property('triggerPrice');
        // expect(instance.triggerPrice).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property totalQuantity (base name: "totalQuantity")', function() {
        // TODO: update the code to test the property totalQuantity
        expect(instance).to.have.property('totalQuantity');
        // expect(instance.totalQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property expiry (base name: "expiry")', function() {
        // TODO: update the code to test the property expiry
        expect(instance).to.have.property('expiry');
        // expect(instance.expiry).to.be(expectedValueLiteral);
      });

      it('should have the property transactionType (base name: "transactionType")', function() {
        // TODO: update the code to test the property transactionType
        expect(instance).to.have.property('transactionType');
        // expect(instance.transactionType).to.be(expectedValueLiteral);
      });

      it('should have the property productType (base name: "productType")', function() {
        // TODO: update the code to test the property productType
        expect(instance).to.have.property('productType');
        // expect(instance.productType).to.be(expectedValueLiteral);
      });

      it('should have the property orderType (base name: "orderType")', function() {
        // TODO: update the code to test the property orderType
        expect(instance).to.have.property('orderType');
        // expect(instance.orderType).to.be(expectedValueLiteral);
      });

      it('should have the property quantity (base name: "quantity")', function() {
        // TODO: update the code to test the property quantity
        expect(instance).to.have.property('quantity');
        // expect(instance.quantity).to.be(expectedValueLiteral);
      });

      it('should have the property filledQuantity (base name: "filledQuantity")', function() {
        // TODO: update the code to test the property filledQuantity
        expect(instance).to.have.property('filledQuantity');
        // expect(instance.filledQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property orderPrice (base name: "orderPrice")', function() {
        // TODO: update the code to test the property orderPrice
        expect(instance).to.have.property('orderPrice');
        // expect(instance.orderPrice).to.be(expectedValueLiteral);
      });

      it('should have the property filledPrice (base name: "filledPrice")', function() {
        // TODO: update the code to test the property filledPrice
        expect(instance).to.have.property('filledPrice');
        // expect(instance.filledPrice).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeOrderNo (base name: "exchangeOrderNo")', function() {
        // TODO: update the code to test the property exchangeOrderNo
        expect(instance).to.have.property('exchangeOrderNo');
        // expect(instance.exchangeOrderNo).to.be(expectedValueLiteral);
      });

      it('should have the property orderValidity (base name: "orderValidity")', function() {
        // TODO: update the code to test the property orderValidity
        expect(instance).to.have.property('orderValidity');
        // expect(instance.orderValidity).to.be(expectedValueLiteral);
      });

      it('should have the property orderTime (base name: "orderTime")', function() {
        // TODO: update the code to test the property orderTime
        expect(instance).to.have.property('orderTime');
        // expect(instance.orderTime).to.be(expectedValueLiteral);
      });

    });
  });

}));
