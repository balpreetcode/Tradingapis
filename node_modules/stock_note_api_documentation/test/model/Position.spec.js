/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StockNoteApiDocumentation);
  }
}(this, function(expect, StockNoteApiDocumentation) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Position', function() {
      beforeEach(function() {
        instance = new StockNoteApiDocumentation.Position();
      });

      it('should create an instance of Position', function() {
        // TODO: update the code to test Position
        expect(instance).to.be.a(StockNoteApiDocumentation.Position);
      });

      it('should have the property averagePrice (base name: "averagePrice")', function() {
        // TODO: update the code to test the property averagePrice
        expect(instance).to.have.property('averagePrice');
        // expect(instance.averagePrice).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property markToMarketPrice (base name: "markToMarketPrice")', function() {
        // TODO: update the code to test the property markToMarketPrice
        expect(instance).to.have.property('markToMarketPrice');
        // expect(instance.markToMarketPrice).to.be(expectedValueLiteral);
      });

      it('should have the property lastTradedPrice (base name: "lastTradedPrice")', function() {
        // TODO: update the code to test the property lastTradedPrice
        expect(instance).to.have.property('lastTradedPrice');
        // expect(instance.lastTradedPrice).to.be(expectedValueLiteral);
      });

      it('should have the property previousClose (base name: "previousClose")', function() {
        // TODO: update the code to test the property previousClose
        expect(instance).to.have.property('previousClose');
        // expect(instance.previousClose).to.be(expectedValueLiteral);
      });

      it('should have the property productCode (base name: "productCode")', function() {
        // TODO: update the code to test the property productCode
        expect(instance).to.have.property('productCode');
        // expect(instance.productCode).to.be(expectedValueLiteral);
      });

      it('should have the property symbolDescription (base name: "symbolDescription")', function() {
        // TODO: update the code to test the property symbolDescription
        expect(instance).to.have.property('symbolDescription');
        // expect(instance.symbolDescription).to.be(expectedValueLiteral);
      });

      it('should have the property tradingSymbol (base name: "tradingSymbol")', function() {
        // TODO: update the code to test the property tradingSymbol
        expect(instance).to.have.property('tradingSymbol');
        // expect(instance.tradingSymbol).to.be(expectedValueLiteral);
      });

      it('should have the property calculatedNetQuantity (base name: "calculatedNetQuantity")', function() {
        // TODO: update the code to test the property calculatedNetQuantity
        expect(instance).to.have.property('calculatedNetQuantity');
        // expect(instance.calculatedNetQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property averageBuyPrice (base name: "averageBuyPrice")', function() {
        // TODO: update the code to test the property averageBuyPrice
        expect(instance).to.have.property('averageBuyPrice');
        // expect(instance.averageBuyPrice).to.be(expectedValueLiteral);
      });

      it('should have the property averageSellPrice (base name: "averageSellPrice")', function() {
        // TODO: update the code to test the property averageSellPrice
        expect(instance).to.have.property('averageSellPrice');
        // expect(instance.averageSellPrice).to.be(expectedValueLiteral);
      });

      it('should have the property boardLotQuantity (base name: "boardLotQuantity")', function() {
        // TODO: update the code to test the property boardLotQuantity
        expect(instance).to.have.property('boardLotQuantity');
        // expect(instance.boardLotQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property boughtPrice (base name: "boughtPrice")', function() {
        // TODO: update the code to test the property boughtPrice
        expect(instance).to.have.property('boughtPrice');
        // expect(instance.boughtPrice).to.be(expectedValueLiteral);
      });

      it('should have the property buyQuantity (base name: "buyQuantity")', function() {
        // TODO: update the code to test the property buyQuantity
        expect(instance).to.have.property('buyQuantity');
        // expect(instance.buyQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property carryForwardQuantity (base name: "carryForwardQuantity")', function() {
        // TODO: update the code to test the property carryForwardQuantity
        expect(instance).to.have.property('carryForwardQuantity');
        // expect(instance.carryForwardQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property carryForwardValue (base name: "carryForwardValue")', function() {
        // TODO: update the code to test the property carryForwardValue
        expect(instance).to.have.property('carryForwardValue');
        // expect(instance.carryForwardValue).to.be(expectedValueLiteral);
      });

      it('should have the property multiplier (base name: "multiplier")', function() {
        // TODO: update the code to test the property multiplier
        expect(instance).to.have.property('multiplier');
        // expect(instance.multiplier).to.be(expectedValueLiteral);
      });

      it('should have the property netPositionValue (base name: "netPositionValue")', function() {
        // TODO: update the code to test the property netPositionValue
        expect(instance).to.have.property('netPositionValue');
        // expect(instance.netPositionValue).to.be(expectedValueLiteral);
      });

      it('should have the property netQuantity (base name: "netQuantity")', function() {
        // TODO: update the code to test the property netQuantity
        expect(instance).to.have.property('netQuantity');
        // expect(instance.netQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property netValue (base name: "netValue")', function() {
        // TODO: update the code to test the property netValue
        expect(instance).to.have.property('netValue');
        // expect(instance.netValue).to.be(expectedValueLiteral);
      });

      it('should have the property positionType (base name: "positionType")', function() {
        // TODO: update the code to test the property positionType
        expect(instance).to.have.property('positionType');
        // expect(instance.positionType).to.be(expectedValueLiteral);
      });

      it('should have the property positionConversions (base name: "positionConversions")', function() {
        // TODO: update the code to test the property positionConversions
        expect(instance).to.have.property('positionConversions');
        // expect(instance.positionConversions).to.be(expectedValueLiteral);
      });

      it('should have the property soldValue (base name: "soldValue")', function() {
        // TODO: update the code to test the property soldValue
        expect(instance).to.have.property('soldValue');
        // expect(instance.soldValue).to.be(expectedValueLiteral);
      });

      it('should have the property transactionType (base name: "transactionType")', function() {
        // TODO: update the code to test the property transactionType
        expect(instance).to.have.property('transactionType');
        // expect(instance.transactionType).to.be(expectedValueLiteral);
      });

      it('should have the property realizedGainAndLoss (base name: "realizedGainAndLoss")', function() {
        // TODO: update the code to test the property realizedGainAndLoss
        expect(instance).to.have.property('realizedGainAndLoss');
        // expect(instance.realizedGainAndLoss).to.be(expectedValueLiteral);
      });

      it('should have the property unrealizedGainAndLoss (base name: "unrealizedGainAndLoss")', function() {
        // TODO: update the code to test the property unrealizedGainAndLoss
        expect(instance).to.have.property('unrealizedGainAndLoss');
        // expect(instance.unrealizedGainAndLoss).to.be(expectedValueLiteral);
      });

      it('should have the property companyName (base name: "companyName")', function() {
        // TODO: update the code to test the property companyName
        expect(instance).to.have.property('companyName');
        // expect(instance.companyName).to.be(expectedValueLiteral);
      });

      it('should have the property expiryDate (base name: "expiryDate")', function() {
        // TODO: update the code to test the property expiryDate
        expect(instance).to.have.property('expiryDate');
        // expect(instance.expiryDate).to.be(expectedValueLiteral);
      });

      it('should have the property optionType (base name: "optionType")', function() {
        // TODO: update the code to test the property optionType
        expect(instance).to.have.property('optionType');
        // expect(instance.optionType).to.be(expectedValueLiteral);
      });

    });
  });

}));
