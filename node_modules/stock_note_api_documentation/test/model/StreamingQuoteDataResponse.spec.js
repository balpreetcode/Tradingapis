/*
 * StockNote API Documentation
 *  StockNote API is a set of Rest APIs using which users can build customized applications based on their trading requirements. It facilitates the users of the APIs to login, search symbols, place orders and execute them, view their order status, positions and holdings etc. This documentation provides you with all the necessary details to understand the SAMCO StockNote API collection. APIs are compatible with both Javascript and Python.    For any issues or support, please raise ticket to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.      For Reference you can download postman collection <a href=\"http://developers.stocknote.com/doc/StockNoteApi.postman_collection.json\">Click here</a>      For downloading a list of all tradeable scrips across exchanges please <a href=\"https://developers.stocknote.com/doc/ScripMaster.csv\">Click here</a> This is a CSV file which you can import into your database.     If you are using Python or Java as client platform to code your strategies and integrate with our APIs, you can use our StockNoteBridge  which provides pre-written wrappers over StockNote APIs that ensure seamless and reliable connectivity to the APIs and help you fast-track your development process.  <table style=\"width:100%\"><tr><th>Languages</th><th>Documentation</th></tr><tr><td>Python</td><td><a href=\"https://github.com/samco-sdk/Python-SDK/blob/master/README.md\">Python SDK Documentation</a></td></tr><tr><td>Java</td><td><a href=\"https://github.com/samco-sdk/Java-SDK/blob/master/README.md\">Java SDK Documentation</a></td></tr></table> Add 'session token' of login api response as 'x-session-token' in header param of all Apis.      NOTE: To ensure stability and there by provide seamless services to our customers, Samco may set limits on your use of the StockNote APIs (for example, limit on the number of requests sent to a specific API) . If you have additional questions regarding the rate limits on APIs, please reach out to us using the <a href=\"https://www.samco.in/support/index/tradeapi\">support link</a> and we will be happy to assist you.   
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.16
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StockNoteApiDocumentation);
  }
}(this, function(expect, StockNoteApiDocumentation) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('StreamingQuoteDataResponse', function() {
      beforeEach(function() {
        instance = new StockNoteApiDocumentation.StreamingQuoteDataResponse();
      });

      it('should create an instance of StreamingQuoteDataResponse', function() {
        // TODO: update the code to test StreamingQuoteDataResponse
        expect(instance).to.be.a(StockNoteApiDocumentation.StreamingQuoteDataResponse);
      });

      it('should have the property aPr (base name: "aPr")', function() {
        // TODO: update the code to test the property aPr
        expect(instance).to.have.property('aPr');
        // expect(instance.aPr).to.be(expectedValueLiteral);
      });

      it('should have the property bPr (base name: "bPr")', function() {
        // TODO: update the code to test the property bPr
        expect(instance).to.have.property('bPr');
        // expect(instance.bPr).to.be(expectedValueLiteral);
      });

      it('should have the property aSz (base name: "aSz")', function() {
        // TODO: update the code to test the property aSz
        expect(instance).to.have.property('aSz');
        // expect(instance.aSz).to.be(expectedValueLiteral);
      });

      it('should have the property bSz (base name: "bSz")', function() {
        // TODO: update the code to test the property bSz
        expect(instance).to.have.property('bSz');
        // expect(instance.bSz).to.be(expectedValueLiteral);
      });

      it('should have the property sym (base name: "sym")', function() {
        // TODO: update the code to test the property sym
        expect(instance).to.have.property('sym');
        // expect(instance.sym).to.be(expectedValueLiteral);
      });

      it('should have the property avgPr (base name: "avgPr")', function() {
        // TODO: update the code to test the property avgPr
        expect(instance).to.have.property('avgPr');
        // expect(instance.avgPr).to.be(expectedValueLiteral);
      });

      it('should have the property c (base name: "c")', function() {
        // TODO: update the code to test the property c
        expect(instance).to.have.property('c');
        // expect(instance.c).to.be(expectedValueLiteral);
      });

      it('should have the property h (base name: "h")', function() {
        // TODO: update the code to test the property h
        expect(instance).to.have.property('h');
        // expect(instance.h).to.be(expectedValueLiteral);
      });

      it('should have the property l (base name: "l")', function() {
        // TODO: update the code to test the property l
        expect(instance).to.have.property('l');
        // expect(instance.l).to.be(expectedValueLiteral);
      });

      it('should have the property o (base name: "o")', function() {
        // TODO: update the code to test the property o
        expect(instance).to.have.property('o');
        // expect(instance.o).to.be(expectedValueLiteral);
      });

      it('should have the property oI (base name: "oI")', function() {
        // TODO: update the code to test the property oI
        expect(instance).to.have.property('oI');
        // expect(instance.oI).to.be(expectedValueLiteral);
      });

      it('should have the property oIChg (base name: "oIChg")', function() {
        // TODO: update the code to test the property oIChg
        expect(instance).to.have.property('oIChg');
        // expect(instance.oIChg).to.be(expectedValueLiteral);
      });

      it('should have the property ch (base name: "ch")', function() {
        // TODO: update the code to test the property ch
        expect(instance).to.have.property('ch');
        // expect(instance.ch).to.be(expectedValueLiteral);
      });

      it('should have the property chPer (base name: "chPer")', function() {
        // TODO: update the code to test the property chPer
        expect(instance).to.have.property('chPer');
        // expect(instance.chPer).to.be(expectedValueLiteral);
      });

      it('should have the property lTrdT (base name: "lTrdT")', function() {
        // TODO: update the code to test the property lTrdT
        expect(instance).to.have.property('lTrdT');
        // expect(instance.lTrdT).to.be(expectedValueLiteral);
      });

      it('should have the property ltp (base name: "ltp")', function() {
        // TODO: update the code to test the property ltp
        expect(instance).to.have.property('ltp');
        // expect(instance.ltp).to.be(expectedValueLiteral);
      });

      it('should have the property ltq (base name: "ltq")', function() {
        // TODO: update the code to test the property ltq
        expect(instance).to.have.property('ltq');
        // expect(instance.ltq).to.be(expectedValueLiteral);
      });

      it('should have the property ltt (base name: "ltt")', function() {
        // TODO: update the code to test the property ltt
        expect(instance).to.have.property('ltt');
        // expect(instance.ltt).to.be(expectedValueLiteral);
      });

      it('should have the property lttUTC (base name: "lttUTC")', function() {
        // TODO: update the code to test the property lttUTC
        expect(instance).to.have.property('lttUTC');
        // expect(instance.lttUTC).to.be(expectedValueLiteral);
      });

      it('should have the property tBQ (base name: "tBQ")', function() {
        // TODO: update the code to test the property tBQ
        expect(instance).to.have.property('tBQ');
        // expect(instance.tBQ).to.be(expectedValueLiteral);
      });

      it('should have the property tSQ (base name: "tSQ")', function() {
        // TODO: update the code to test the property tSQ
        expect(instance).to.have.property('tSQ');
        // expect(instance.tSQ).to.be(expectedValueLiteral);
      });

      it('should have the property ttv (base name: "ttv")', function() {
        // TODO: update the code to test the property ttv
        expect(instance).to.have.property('ttv');
        // expect(instance.ttv).to.be(expectedValueLiteral);
      });

      it('should have the property vol (base name: "vol")', function() {
        // TODO: update the code to test the property vol
        expect(instance).to.have.property('vol');
        // expect(instance.vol).to.be(expectedValueLiteral);
      });

      it('should have the property yH (base name: "yH")', function() {
        // TODO: update the code to test the property yH
        expect(instance).to.have.property('yH');
        // expect(instance.yH).to.be(expectedValueLiteral);
      });

      it('should have the property yL (base name: "yL")', function() {
        // TODO: update the code to test the property yL
        expect(instance).to.have.property('yL');
        // expect(instance.yL).to.be(expectedValueLiteral);
      });

      it('should have the property streamingType (base name: "streaming_type")', function() {
        // TODO: update the code to test the property streamingType
        expect(instance).to.have.property('streamingType');
        // expect(instance.streamingType).to.be(expectedValueLiteral);
      });

    });
  });

}));
