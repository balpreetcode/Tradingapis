var StockNoteApiDocumentation = require('stock_note_api_documentation');

var loginAPI = new StockNoteApiDocumentation.UserLoginApi()
var searchAPI = new StockNoteApiDocumentation.SearchEquityDerivativeApi()
var ordersAPI = new StockNoteApiDocumentation.OrdersApi()
var tradebookAPI = new StockNoteApiDocumentation.TradeBookApi()
var historyAPI = new StockNoteApiDocumentation.HistoricalCandleDataApi()
var optionAPI = new StockNoteApiDocumentation.OptionApi()
var quoteAPI = new StockNoteApiDocumentation.QuoteApi()
var limitsAPI = new StockNoteApiDocumentation.UserLimitsApi()
var positionAPI = new StockNoteApiDocumentation.PositionsApi()
var holdingAPI = new StockNoteApiDocumentation.HoldingsApi()
var intradayAPI = new StockNoteApiDocumentation.IntraDayCandleDataApi()
var logoutAPI=new StockNoteApiDocumentation.UserLogoutApi()


var stocknote = {

    
    userLogin: function (opts) {

        var promise = new Promise((resolve, reject) => {
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            loginAPI.login(opts, callback)
        });
        return promise;

    },
    setSessionToken: function (xSessionToken) {
        if (xSessionToken) {
            this.sessionToken = xSessionToken;
        } else {
            throw new Error("Please pass session token");
        }
    },

    search: function (searchSymbolName, opts) {

        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if (!searchSymbolName) {
                reject("Please Enter a searchSymbolName");
            }
        
            if(opts != undefined){
                if('exchange' in opts){
                    if(opts['exchange'] == undefined){
                        reject("Please enter a valid exchange - BSE/NSE/NFO/CDS/MCX");
                    }
                }
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    reject(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            searchAPI.searchEquityDerivative(this.sessionToken, searchSymbolName, opts, callback)
        });
        return promise;
    },

    getQuotes: function (symbolName, opts) {

        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if (!symbolName) {
                reject("Please Enter a symbolName");
            }

            if(opts != undefined){

                if('exchange' in opts){
                    if(opts['exchange'] == undefined){
                        reject("Please enter a valid exchange - BSE/NSE/NFO/CDS/MCX");
                    }
                }
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            quoteAPI.getQuote(this.sessionToken, symbolName, opts, callback)
        });
        return promise;
    },

    getIndexQuotes: function (indexName) {

        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if (!indexName) {
                reject("Please Enter a IndexName");
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            quoteAPI.getindexQuote(this.sessionToken, indexName, callback)
        });
        return promise;
    },

    optionchain: function (searchSymbolName, opts) {

        var promise = new Promise((resolve, reject) => {
            if (!searchSymbolName) {
                reject("Please Enter a searchSymbolName");
            }

            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if(opts != undefined){

                if('exchange' in opts){
                    if(opts['exchange'] == undefined){
                        reject("Please enter a valid exchange - BSE/NSE/NFO/CDS/MCX");
                    }
                }
                if('optionType' in opts){
                    if(opts['optionType'] == undefined){
                        reject("Please provide a valid OptionType like CE OR PE");
                    }
                }
            }

            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            optionAPI.getOptionContracts(this.sessionToken, searchSymbolName, opts, callback)
        });
        return promise;
    },

    userLimits: function () {

        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            limitsAPI.getLimits(this.sessionToken, callback);
        });
        return promise;
    },

    placeOrder: function (opts) {
        // console.log(JSON.stringify(opts))
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };

            ordersAPI.placeOrder(this.sessionToken, opts, callback)
        });
        return promise;
    },

    placeOrderBO: function (opts) {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            ordersAPI.placeOrderBO(this.sessionToken, opts, callback)
        });
        return promise;
    },

    placeOrderCO: function (opts) {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            ordersAPI.placeOrderCO(this.sessionToken, opts, callback)
        });
        return promise;
    },

    orderStatus: function (orderNumber) {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if (!orderNumber) {
                reject("Please Enter a orderNumber");
            }

            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            ordersAPI.getOrderStatus(this.sessionToken, orderNumber, callback);
        });
        return promise;

    },

    getTriggerOrder: function (orderNumber) {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if (!orderNumber) {
                reject("Please Enter a orderNumber");
            }

            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            ordersAPI.getTriggerOrderNumbers(this.sessionToken, orderNumber, callback);
        });
        return promise;

    },

    orderBook: function () {

        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            ordersAPI.getOrderBook(this.sessionToken, callback);
        });
        return promise;
    },

    modifyOrders: function (orderNumber,opts) {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if (!orderNumber) {
                reject("Please Enter a orderNumber");
            }

            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            ordersAPI.modifyOrder(this.sessionToken, orderNumber, opts, callback);
        });
        return promise;

    },

    cancelOrders: function (orderNumber) {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if (!orderNumber) {
                reject("Please Enter a orderNumber");
            }

            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            ordersAPI.cancelOrder(this.sessionToken, orderNumber, callback);
        });
        return promise;

    },

    cancelCOOrder: function (orderNumber) {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if (!orderNumber) {
                reject("Please Enter a orderNumber");
            }

            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            ordersAPI.cancelOrderCO(this.sessionToken, orderNumber, callback);
        });
        return promise;

    },

    cancelBOOrder: function (orderNumber) {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if (!orderNumber) {
                reject("Please Enter a orderNumber");
            }

            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            ordersAPI.cancelOrderBO(this.sessionToken, orderNumber, callback);
        });
        return promise;

    },

    tradeBook: function () {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            tradebookAPI.getTradeBook(this.sessionToken, callback);
        });
        return promise;

    },

    userPositions: function (positionType) {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if (!positionType) {
                reject("Please Enter a PositionType DAY/NET");
            }

            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            positionAPI.getPositions(this.sessionToken, positionType, callback);
        });
        return promise;
    },

    positionConversion: function (opts) {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            positionAPI.convertPosition(this.sessionToken, opts, callback);
        });
        return promise;

    },

    positionSquareoff: function (opts) {

        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            positionAPI.squareOffPosition(this.sessionToken, opts, callback);
        });
        return promise;
    },
    holdings: function () {

        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            holdingAPI.getHolding(this.sessionToken, callback);
        });
        return promise;
    },

    intradayCandleData: function (symbolName, fromDate, opts) {

        var promise = new Promise((resolve, reject) => {
            if (!symbolName) {
                reject("Please Enter a SymbolName");
            }

            if (!fromDate) {
                reject("Please Enter a fromDate");
            }

            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

            if(opts != undefined){
                if('exchange' in opts){
                    if(opts['exchange'] == undefined){
                        reject("Please enter a valid exchange - BSE/NSE/NFO/CDS/MCX");
                    }
                }

                if('interval' in opts){
                    if(opts['interval'] == undefined){
                        reject("Please enter a valid interval in minutes (5 or 10 or 15 or 30 or 60)");
                    }
                }
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            intradayAPI.getIntradayCandleData(this.sessionToken, symbolName, fromDate, opts, callback)
        });
        return promise;
    },

    indexIntradayCandleData: function (indexName, fromDate, opts) {

        var promise = new Promise((resolve, reject) => {
            
            if (!fromDate) {
                reject("Please Enter a fromDate");
            }
            if (!indexName) {
                reject("Please Enter a IndexName");
            }

            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            
            if(opts != undefined){
                if('interval' in opts){
                    if(opts['interval'] == undefined){
                        reject("Please enter a valid interval in minutes (5 or 10 or 15 or 30 or 60)");
                    }
                }
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            intradayAPI.getIndexIntradayCandleData(this.sessionToken, indexName, fromDate, opts, callback)
        });
        return promise;
    },

    historicalCandleData: function (symbolName, fromDate, opts) {

        var promise = new Promise((resolve, reject) => {
            if (!symbolName) {
                reject("Please Enter a SymbolName");
            }

            if (!fromDate) {
                reject("Please Enter a fromDate");
            }

            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            if(opts != undefined){

                if('exchange' in opts){
                    if(opts['exchange'] == undefined){
                        reject("Please enter a valid exchange - BSE/NSE/NFO/CDS/MCX");
                    }
                }
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            historyAPI.getHistoricalCandleData(this.sessionToken, symbolName, fromDate, opts, callback)
        });
        return promise;
    },
    
    indexHistoricalCandleData: function (indexName, fromDate, opts) {

        var promise = new Promise((resolve, reject) => {
            if (!indexName) {
                reject("Please Enter a IndexName");
            }

            if (!fromDate) {
                reject("Please Enter a fromDate");
            }

            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }
            var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            historyAPI.getIndexCandleData(this.sessionToken, indexName, fromDate, opts, callback)
        });
        return promise;
    },

    userLogout: function (orderNumber) {
        var promise = new Promise((resolve, reject) => {
            if (!this.sessionToken) {
                reject("Please set a session token in SetSessionToken()");
            }

               var callback = function (error, data, response) {
                if (error) {
                    value = JSON.stringify(error, null, 1);
                    value1 = JSON.parse(value);
                    value = value1["response"]["text"]
                    resolve(value)
                } else {
                    resolve(JSON.stringify(data, null, 1));
                }
            };
            logoutAPI.logout(this.sessionToken, callback);
        });
        return promise;

    },
};

module.exports={
    stocknote:stocknote
}

// module.exports = Object.freeze({
//     MY_CONSTANT: 'some value',
//     ANOTHER_CONSTANT: 'another value'
// });